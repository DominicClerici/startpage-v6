================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-18T08:34:43.951Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.cjs
.gitignore
.prettierrc
components.json
favicon.svg
features.txt
index.html
manifest.json
package.json
postcss.config.js
public/vite.svg
README.md
src/App.tsx
src/assets/react.svg
src/components/background/Background.tsx
src/components/background/variants/aura.css
src/components/background/variants/Aura.tsx
src/components/background/variants/Solid.tsx
src/components/clock/MainClock.tsx
src/components/greeting/Greeting.tsx
src/components/lib/AnimateUnmount.tsx
src/components/lib/Loading.tsx
src/components/lifx/Content.tsx
src/components/lifx/IndivLight.tsx
src/components/lifx/Lifx.tsx
src/components/lifx/lifxStyles.css
src/components/notepad/Content.tsx
src/components/notepad/Notepad.tsx
src/components/search/getHistory.ts
src/components/search/Search.tsx
src/components/settings/appearance/Appearance.tsx
src/components/settings/appearance/backgrounds/AuraSettings.tsx
src/components/settings/appearance/backgrounds/BackgroundSelector.tsx
src/components/settings/appearance/backgrounds/SolidSettings.tsx
src/components/settings/appearance/ChangeLayout.tsx
src/components/settings/controls/Toggle.tsx
src/components/settings/general/General.tsx
src/components/settings/general/greeting/CustomGreeting.tsx
src/components/settings/general/greeting/Greeting.tsx
src/components/settings/general/mantras/MantraFrequency.tsx
src/components/settings/general/mantras/MantraSettings.tsx
src/components/settings/general/mantras/MantrasUsed.tsx
src/components/settings/general/styles.css
src/components/settings/general/timer/TimerSettings.tsx
src/components/settings/general/todo/TodoSettings.tsx
src/components/settings/general/weather/WeatherLocation.tsx
src/components/settings/general/weather/WeatherLocationList.tsx
src/components/settings/general/weather/WeatherSettings.tsx
src/components/settings/integrations/Integrations.tsx
src/components/settings/integrations/lifx/LifxSettings.tsx
src/components/settings/integrations/SpotifySettings.tsx
src/components/settings/NavigationControl.tsx
src/components/settings/Opener.tsx
src/components/settings/shortcuts/CreateShortcut.tsx
src/components/settings/shortcuts/EditShortcut.tsx
src/components/settings/shortcuts/ShortcutEditor.tsx
src/components/settings/shortcuts/Shortcuts.tsx
src/components/settings/shortcuts/ViewSelector.tsx
src/components/settings/styles.css
src/components/shortcuts/ImageDisplay.tsx
src/components/shortcuts/Shortcuts.tsx
src/components/shortcuts/stack/AllShortcutsDialog.tsx
src/components/shortcuts/stack/DisplayAll.tsx
src/components/shortcuts/stack/Suggested.tsx
src/components/spotify/SpotifyAuthController.tsx
src/components/spotify/SpotifyMain.tsx
src/components/spotify/spotifyStyle.css
src/components/timer/StopwatchRunning.tsx
src/components/timer/Timer.tsx
src/components/timer/TimerInput.tsx
src/components/timer/TimerRunning.tsx
src/components/todos/Content.tsx
src/components/todos/todos.css
src/components/todos/Todos.tsx
src/components/ui/accordion.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/command.tsx
src/components/ui/dialog.tsx
src/components/ui/form.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/popover.tsx
src/components/ui/select.tsx
src/components/ui/separator.tsx
src/components/ui/switch.tsx
src/components/ui/tooltip.tsx
src/components/weather/content/Content.tsx
src/components/weather/content/CustomParts.tsx
src/components/weather/content/DaySelector.tsx
src/components/weather/content/Icons.tsx
src/components/weather/content/Loader.tsx
src/components/weather/content/ViewSelector.tsx
src/components/weather/content/weather.css
src/components/weather/content/WeatherChart.tsx
src/components/weather/convertWMOCode.ts
src/components/weather/Weather.tsx
src/ConnectionWrapper.tsx
src/context/appearance/Appearance.tsx
src/context/appearance/BackgroundSettings.tsx
src/context/appearance/Layout.tsx
src/context/general/ClockContext.tsx
src/context/general/GreetingContext.tsx
src/context/general/TodosContext.tsx
src/context/general/UserInfoContext.tsx
src/context/integrations/Integrations.tsx
src/context/integrations/Lifx.tsx
src/context/integrations/Spotify.tsx
src/context/MainProvider.tsx
src/context/shortcuts/Shortcuts.tsx
src/context/timer/TimerProvider.tsx
src/context/weather/WeatherProvider.tsx
src/hooks/useChromeStorage.ts
src/index.css
src/keyframes.css
src/LayoutController.tsx
src/lib/utils.ts
src/main.tsx
src/types.ts
src/utils/formatDate.ts
src/utils/spotify.ts
src/utils/spotifyAPI.ts
src/vite-env.d.ts
tailwind.config.js
TODO.txt
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .eslintrc.cjs
================
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: ["eslint:recommended", "plugin:@typescript-eslint/recommended", "plugin:react-hooks/recommended"],
  ignorePatterns: ["dist", ".eslintrc.cjs"],
  parser: "@typescript-eslint/parser",
  plugins: ["react-refresh"],
  rules: {
    "react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
  },
}

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: .prettierrc
================
{
  "plugins": ["prettier-plugin-tailwindcss"],
  "tabWidth": 2,
  "printWidth": 120,
  "semi": false
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

================
File: favicon.svg
================
<svg width="42" height="38" viewBox="0 0 42 38" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd"
        d="M24.3576 2C22.818 -0.66667 18.969 -0.666664 17.4294 2L0.541865 31.25C-0.997736 33.9167 0.926772 37.25 4.00597 37.25H37.781C40.8602 37.25 42.7847 33.9167 41.2451 31.25L24.3576 2ZM19.6255 13C18.8557 11.6667 16.9312 11.6667 16.1614 13L6.20212 30.25C5.43232 31.5833 6.39457 33.25 7.93417 33.25H27.8528C29.3924 33.25 30.3546 31.5833 29.5848 30.25L19.6255 13Z"
        fill="url(#paint0_linear_463_4)" />
    <defs>
        <linearGradient id="paint0_linear_463_4" x1="41.3936" y1="1.13623e-06" x2="0.393554" y2="37"
            gradientUnits="userSpaceOnUse">
            <stop stop-color="#A8C0FF" />
            <stop offset="1" stop-color="#3F2B96" />
        </linearGradient>
    </defs>
</svg>

================
File: features.txt
================
most relevant websites (suggestions) -> algorithm selected
search bar that searches history + shortcuts
shortcut groups
weather obv, make popup window get rlly advanced for no reason
a bunch of cool animated backgrounds
main focus of the day
photograph background
focus mode like momentum
world clock stuff

================
File: index.html
================
<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Spring - New Tab</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: manifest.json
================
{
  "manifest_version": 3,
  "name": "Spring Tab - New Tab",
  "description": "A customizable, fast, and beautiful new tab page for Chrome.",
  "version": "1.0",
  "chrome_url_overrides": {
    "newtab": "./dist/index.html",
    "homepage": "./dist/index.html"
  },
  "icons": {
    "128": "favicon-chrome.png"
  },
  "host_permissions": ["http://localhost:3001/*"],
  "content_security_policy": {
    "extension_pages": "script-src 'self'; object-src 'self'; connect-src 'self' http://localhost:3001 https://api.spotify.com;"
  },
  "permissions": ["storage", "history", "identity"]
}

================
File: package.json
================
{
  "name": "startpage-v6",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@dnd-kit/core": "^6.1.0",
    "@dnd-kit/modifiers": "^7.0.0",
    "@dnd-kit/sortable": "^8.0.0",
    "@dnd-kit/utilities": "^3.2.2",
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "fuzzysort": "^3.0.2",
    "lucide-react": "^0.414.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.52.0",
    "react-transition-group": "^4.4.5",
    "recharts": "^2.12.7",
    "simplex-noise": "^4.0.2",
    "tailwind-merge": "^2.4.0",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^10.0.0",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/chrome": "^0.0.268",
    "@types/node": "^20.14.12",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "^7.13.1",
    "@typescript-eslint/parser": "^7.13.1",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "postcss": "^8.4.38",
    "prettier": "^3.3.2",
    "prettier-plugin-tailwindcss": "^0.6.5",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.2.2",
    "vite": "^5.3.1"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default {
  // other rules...
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
    project: ['./tsconfig.json', './tsconfig.node.json'],
    tsconfigRootDir: __dirname,
  },
}
```

- Replace `plugin:@typescript-eslint/recommended` to `plugin:@typescript-eslint/recommended-type-checked` or `plugin:@typescript-eslint/strict-type-checked`
- Optionally add `plugin:@typescript-eslint/stylistic-type-checked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and add `plugin:react/recommended` & `plugin:react/jsx-runtime` to the `extends` list

================
File: src/App.tsx
================
import LayoutController from "./LayoutController"
import Background from "./components/background/Background"
import MainProvider from "./context/MainProvider"

function App() {
  return (
    <MainProvider>
      <main>
        <Background />
        <LayoutController />
      </main>
    </MainProvider>
  )
}

export default App

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/background/Background.tsx
================
import { BackgroundMode, DarkModeContext } from "@/context/appearance/Appearance"
import { useContext } from "react"
import Aura from "./variants/Aura"
import Solid from "./variants/Solid"

export default function Background() {
  const { backgroundMode } = useContext(BackgroundMode)
  const { darkMode } = useContext(DarkModeContext)
  if (backgroundMode === "aura") {
    return <Aura darkMode={darkMode} />
  }
  if (backgroundMode === "solid") {
    return <Solid darkMode={darkMode} />
  }
  return <div className="fixed inset-0 -z-50 bg-background"></div>
}

================
File: src/components/background/variants/aura.css
================
:root {
  --color-bg1: 21, 11, 26;
  --color-bg2: 0, 17, 42;
  --color-1: 48, 28, 59;
  --color-2: 41, 31, 67;
  --color-3: 32, 34, 72;
  --color-4: 24, 36, 73;
  --color-5: 12, 40, 71;
  --color-interactive: 12, 49, 60;
  /* --color-bg1: rgb(213, 51, 105);
  --color-bg2: rgb(218, 174, 81);
  --color-1: 213, 51, 105;
  --color-2: 214, 88, 98;
  --color-3: 215, 125, 91;
  --color-4: 216, 162, 84;
  --color-5: 218, 174, 81;
  --color-interactive: 215, 125, 91; */
  --circle-size: 80%;
  --blending: hard-light;
}

@keyframes moveInCircle {
  0% {
    transform: rotate(0deg);
  }
  50% {
    transform: rotate(180deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes moveVertical {
  0% {
    transform: translateY(-50%);
  }
  50% {
    transform: translateY(50%);
  }
  100% {
    transform: translateY(-50%);
  }
}

@keyframes moveHorizontal {
  0% {
    transform: translateX(-50%) translateY(-10%);
  }
  50% {
    transform: translateX(50%) translateY(10%);
  }
  100% {
    transform: translateX(-50%) translateY(-10%);
  }
}

.gradient-bg {
  z-index: -10;
  width: 100vw;
  height: 100vh;
  position: fixed;
  overflow: hidden;
  background: linear-gradient(40deg, rgb(var(--color-bg1)), rgb(var(--color-bg2)));
  top: 0;
  left: 0;

  svg {
    display: none;
  }

  .gradients-container {
    filter: url(#goo) blur(40px);
    width: 100%;
    height: 100%;
  }

  .g1 {
    position: absolute;
    background: radial-gradient(circle at center, rgba(var(--color-1), 0.8) 0, rgba(var(--color-1), 0) 50%) no-repeat;
    mix-blend-mode: var(--blending);

    width: var(--circle-size);
    height: var(--circle-size);
    top: calc(50% - var(--circle-size) / 2);
    left: calc(50% - var(--circle-size) / 2);

    transform-origin: center center;
    animation: moveVertical 30s ease infinite;

    opacity: 1;
  }

  .g2 {
    position: absolute;
    background: radial-gradient(circle at center, rgba(var(--color-2), 0.8) 0, rgba(var(--color-2), 0) 50%) no-repeat;
    mix-blend-mode: var(--blending);

    width: var(--circle-size);
    height: var(--circle-size);
    top: calc(50% - var(--circle-size) / 2);
    left: calc(50% - var(--circle-size) / 2);

    transform-origin: calc(50% - 400px);
    animation: moveInCircle 20s reverse infinite;

    opacity: 1;
  }
  .g3 {
    position: absolute;
    background: radial-gradient(circle at center, rgba(var(--color-3), 0.8) 0, rgba(var(--color-3), 0) 50%) no-repeat;
    mix-blend-mode: var(--blending);

    width: var(--circle-size);
    height: var(--circle-size);
    top: calc(50% - var(--circle-size) / 2 + 200px);
    left: calc(50% - var(--circle-size) / 2 - 500px);

    transform-origin: calc(50% + 400px);
    animation: moveInCircle 40s linear infinite;

    opacity: 1;
  }

  .g4 {
    position: absolute;
    background: radial-gradient(circle at center, rgba(var(--color-4), 0.8) 0, rgba(var(--color-4), 0) 50%) no-repeat;
    mix-blend-mode: var(--blending);

    width: var(--circle-size);
    height: var(--circle-size);
    top: calc(50% - var(--circle-size) / 2);
    left: calc(50% - var(--circle-size) / 2);

    transform-origin: calc(50% - 200px);
    animation: moveHorizontal 40s ease infinite;

    opacity: 0.7;
  }
  .g5 {
    position: absolute;
    background: radial-gradient(circle at center, rgba(var(--color-5), 0.8) 0, rgba(var(--color-5), 0) 50%) no-repeat;
    mix-blend-mode: var(--blending);

    width: calc(var(--circle-size) * 2);
    height: calc(var(--circle-size) * 2);
    top: calc(50% - var(--circle-size));
    left: calc(50% - var(--circle-size));

    transform-origin: calc(50% - 800px) calc(50% + 200px);
    animation: moveInCircle 20s ease infinite;

    opacity: 1;
  }

  .interactive {
    position: absolute;
    background: radial-gradient(
        circle at center,
        rgba(var(--color-interactive), 0.8) 0,
        rgba(var(--color-interactive), 0) 50%
      )
      no-repeat;
    mix-blend-mode: var(--blending);

    width: 100%;
    height: 100%;
    top: -50%;
    left: -50%;

    opacity: 0.7;
  }
}

================
File: src/components/background/variants/Aura.tsx
================
import { AuraColorContext, FollowMouseContext } from "@/context/appearance/BackgroundSettings"
import "./aura.css"
import { useContext, useEffect, useRef } from "react"

const auraBackgroundColors = [
  {
    bg1: { rgb: "21, 11, 26", rgbL: "188, 159, 204" },
    bg2: { rgb: "0, 17, 42", rgbL: "163, 186, 219" },
    1: { rgb: "48, 28, 59", rgbL: "195, 132, 234" },
    2: { rgb: "41, 31, 67", rgbL: "175, 142, 255" },
    3: { rgb: "32, 34, 72", rgbL: "158, 164, 255" },
    4: { rgb: "24, 36, 73", rgbL: "126, 164, 255" },
    5: { rgb: "12, 40, 71", rgbL: "88, 170, 255" },
    interactive: { rgb: "12, 49, 60", rgbL: "138, 206, 240" },
  },
  {
    bg1: { rgb: "140, 20, 52", rgbL: "237, 158, 188" },
    bg2: { rgb: "145, 102, 20", rgbL: "237, 215, 168" },
    1: { rgb: "140, 20, 52", rgbL: "237, 158, 188" },
    2: { rgb: "145, 40, 45", rgbL: "237, 176, 181" },
    3: { rgb: "150, 60, 38", rgbL: "237, 194, 174" },
    4: { rgb: "155, 80, 31", rgbL: "237, 212, 167" },
    5: { rgb: "145, 102, 20", rgbL: "237, 215, 168" },
    interactive: { rgb: "150, 60, 38", rgbL: "237, 194, 174" },
  },
  {
    bg1: { rgb: "31, 21, 75", rgbL: "168, 192, 255" },
    bg2: { rgb: "84, 96, 127", rgbL: "220, 230, 255" },
    1: { rgb: "31, 21, 75", rgbL: "168, 192, 255" },
    2: { rgb: "44, 37, 91", rgbL: "182, 203, 255" },
    3: { rgb: "57, 52, 107", rgbL: "196, 214, 255" },
    4: { rgb: "70, 68, 123", rgbL: "210, 225, 255" },
    5: { rgb: "84, 96, 127", rgbL: "220, 230, 255" },
    interactive: { rgb: "57, 52, 107", rgbL: "196, 214, 255" },
  },
  {
    bg1: { rgb: "126, 93, 22", rgbL: "255, 225, 155" },
    bg2: { rgb: "17, 96, 97", rgbL: "150, 235, 236" },
    1: { rgb: "126, 93, 22", rgbL: "255, 225, 155" },
    2: { rgb: "99, 94, 47", rgbL: "226, 228, 180" },
    3: { rgb: "71, 95, 72", rgbL: "197, 231, 205" },
    4: { rgb: "44, 96, 97", rgbL: "168, 234, 235" },
    5: { rgb: "17, 96, 97", rgbL: "150, 235, 236" },
    interactive: { rgb: "71, 95, 72", rgbL: "197, 231, 205" },
  },
  {
    bg1: { rgb: "31, 47, 125", rgbL: "159, 177, 253" },
    bg2: { rgb: "126, 35, 53", rgbL: "254, 163, 184" },
    1: { rgb: "31, 47, 125", rgbL: "159, 177, 253" },
    2: { rgb: "55, 44, 107", rgbL: "183, 171, 235" },
    3: { rgb: "78, 41, 89", rgbL: "207, 165, 217" },
    4: { rgb: "102, 38, 71", rgbL: "231, 159, 199" },
    5: { rgb: "126, 35, 53", rgbL: "254, 163, 184" },
    interactive: { rgb: "78, 41, 89", rgbL: "207, 165, 217" },
  },
  {
    bg1: { rgb: "40, 40, 40", rgbL: "220, 220, 220" },
    bg2: { rgb: "80, 80, 80", rgbL: "240, 240, 240" },
    1: { rgb: "25, 25, 25", rgbL: "220, 220, 220" },
    2: { rgb: "30, 30, 30", rgbL: "200, 200, 200" },
    3: { rgb: "50, 50, 50", rgbL: "180, 180, 180" },
    4: { rgb: "70, 70, 70", rgbL: "160, 160, 160" },
    5: { rgb: "90, 90, 90", rgbL: "140, 140, 140" },
    interactive: { rgb: "50, 50, 50", rgbL: "180, 180, 180" },
  },
]

const Aura = ({ darkMode }) => {
  const interactive = useRef(null)
  const { followMouse } = useContext(FollowMouseContext)
  const { auraColor } = useContext(AuraColorContext)

  useEffect(() => {
    let curX = 0
    let curY = 0
    let tgX = 0
    let tgY = 0

    function move() {
      curX += (tgX - curX) / 20
      curY += (tgY - curY) / 20
      if (interactive.current) {
        interactive.current.style.transform = `translate(${Math.round(curX)}px, ${Math.round(curY)}px)`
        requestAnimationFrame(() => {
          move()
        })
      }
    }

    move()
    const handleMouseMove = (event: any) => {
      tgX = event.clientX
      tgY = event.clientY
    }
    if (followMouse) {
      window.addEventListener("mousemove", handleMouseMove)
    }
    return () => {
      window.removeEventListener("mousemove", handleMouseMove)
    }
  }, [followMouse])

  useEffect(() => {
    // Ensure auraColor is within the valid range
    const colorScheme = auraBackgroundColors[auraColor] || auraBackgroundColors[0]

    Object.entries(colorScheme).forEach(([key, value]) => {
      const colorValue = darkMode ? value.rgb : value.rgbL
      document.documentElement.style.setProperty(`--color-${key}`, colorValue)
    })
    // remove all properties
  }, [auraColor, darkMode])

  return (
    <div className={`gradient-bg ${!darkMode && "lightC"}`}>
      <svg xmlns="http://www.w3.org/2000/svg">
        <defs>
          <filter id="goo">
            <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
            <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8" result="goo" />
            <feBlend in="SourceGraphic" in2="goo" />
          </filter>
        </defs>
      </svg>
      <div className="gradients-container">
        <div className="g1"></div>
        <div className="g2"></div>
        <div className="g3"></div>
        <div className="g4"></div>
        <div className="g5"></div>
        <div ref={interactive} className="interactive"></div>
      </div>
    </div>
  )
}

export default Aura

================
File: src/components/background/variants/Solid.tsx
================
import { SolidBackgroundColorContext } from "@/context/appearance/BackgroundSettings"
import { useContext } from "react"

export const solidBackgroundColors = [
  {
    bg: { rgb: "160, 0, 0", rgbL: "255, 200, 200" }, // Red
  },
  {
    bg: { rgb: "180, 90, 0", rgbL: "255, 220, 180" }, // Orange
  },
  {
    bg: { rgb: "180, 180, 0", rgbL: "255, 255, 180" }, // Yellow
  },
  {
    bg: { rgb: "0, 120, 0", rgbL: "180, 255, 180" }, // Green
  },
  {
    bg: { rgb: "0, 100, 160", rgbL: "180, 220, 255" }, // Blue
  },
  {
    bg: { rgb: "75, 0, 130", rgbL: "220, 180, 255" }, // Indigo
  },
  {
    bg: { rgb: "128, 0, 128", rgbL: "255, 180, 255" }, // Purple
  },
  {
    bg: { rgb: "160, 0, 80", rgbL: "255, 180, 220" }, // Pink
  },
  {
    bg: { rgb: "60, 60, 60", rgbL: "200, 200, 200" }, // Dark Gray
  },
  {
    bg: { rgb: "15, 15, 15", rgbL: "240, 240, 240" }, // Near Black/White
  },
]

export default function Solid({ darkMode }: { darkMode: boolean }) {
  const { solidBackgroundColor } = useContext(SolidBackgroundColorContext)

  // Ensure solidBackgroundColor is within bounds
  const colorIndex = Math.min(Math.max(solidBackgroundColor, 0), solidBackgroundColors.length - 1)

  // Select the appropriate color based on darkMode
  const selectedColor = darkMode ? solidBackgroundColors[colorIndex].bg.rgb : solidBackgroundColors[colorIndex].bg.rgbL

  return (
    <div
      style={{ backgroundColor: `rgb(${selectedColor})` }}
      className="fixed left-0 top-0 -z-10 h-screen w-screen"
    ></div>
  )
}

================
File: src/components/clock/MainClock.tsx
================
import { useContext, useEffect, useState } from "react"
import { Clock24HourContext, ShowSecondsContext } from "../../context/general/ClockContext"
import Loading from "../lib/Loading"

const MainClock = () => {
  const { use24Hour } = useContext(Clock24HourContext)
  const { showSeconds } = useContext(ShowSecondsContext)
  const [time, setTime] = useState(null)
  // for colon that blinks with seconds in clock
  const [active, setActive] = useState(false)
  useEffect(() => {
    const updateClock = () => {
      const currentTime = new Date()
      let rawHours = currentTime.getHours()
      if (use24Hour === false) {
        rawHours = rawHours % 12
      }
      const rawMinutes = currentTime.getMinutes()
      const rawSeconds = currentTime.getSeconds()
      setTime({
        hours: String(rawHours ? rawHours : 12),
        minutes: rawMinutes < 10 ? `0${rawMinutes}` : String(rawMinutes),
        seconds: rawSeconds < 10 ? `0${rawSeconds}` : String(rawSeconds),
        ampm: use24Hour === false ? currentTime.toLocaleTimeString("en-US", { hour12: true }).slice(-2) : "",
      })
    }
    updateClock()
    const interval = setInterval(() => {
      setActive((prev) => !prev)
      updateClock()
    }, 1000)
    return () => clearInterval(interval)
  }, [use24Hour, showSeconds])

  if (time) {
    return (
      <h1 className="select-none text-[90px] font-semibold leading-none text-foreground">
        {time?.hours}
        <span className={`transition-opacity ${active ? "" : "opacity-25"}`}>:</span>
        {time?.minutes}
        {showSeconds && (
          <>
            <span className={`transition-opacity ${active ? "" : "opacity-25"}`}>:</span>
            {time?.seconds}
          </>
        )}
        <span className="text-xl font-light text-muted-foreground">{time?.ampm}</span>
      </h1>
    )
  } else {
    return <></>
  }
}

export default MainClock

================
File: src/components/greeting/Greeting.tsx
================
import { useContext } from "react"
import {
  CustomGreetingContext,
  MantraEnabledContext,
  MantraFrequencyContext,
  MantraOptionsContext,
  ShowGreetingContext,
} from "../../context/general/GreetingContext"
import { FirstNameContext } from "../../context/general/UserInfoContext"

function getGreeting() {
  const currentHour = new Date().getHours()
  let greeting

  if (currentHour >= 5 && currentHour < 12) {
    greeting = "Good morning, "
  } else if (currentHour >= 12 && currentHour < 17) {
    greeting = "Good afternoon, "
  } else if (currentHour >= 17 && currentHour < 21) {
    greeting = "Good evening, "
  } else {
    greeting = "Good night, "
  }

  return greeting
}

export default function Greeting() {
  const { frequency } = useContext(MantraFrequencyContext)
  const { showGreeting } = useContext(ShowGreetingContext)
  const { mantraEnabled } = useContext(MantraEnabledContext)
  const { customGreeting } = useContext(CustomGreetingContext)
  const { options } = useContext(MantraOptionsContext)
  const { firstName } = useContext(FirstNameContext)

  let string = ""
  if (showGreeting) {
    if (customGreeting.trim() !== "") {
      string = `${customGreeting.trim()} ${firstName}`
    } else {
      string = getGreeting() + firstName
    }
  }

  if (mantraEnabled) {
    // TODO: make sure to add pool of curated mantras
    const mantra = options[Math.floor(Math.random() * options.length)]
    if (frequency === "1") {
      // 1% chance of showing mantra
      if (Math.random() < 0.01) {
        string = mantra
      }
    } else if (frequency === "2") {
      // 5% chance of showing mantra
      if (Math.random() < 0.05) {
        string = mantra
      }
    } else if (frequency === "3") {
      // 25% chance of showing mantra
      if (Math.random() < 0.25) {
        string = mantra
      }
    } else if (frequency === "4") {
      // 100% chance of showing mantra
      string = mantra
    }
  }
  return <p className="text-3xl font-medium text-muted-foreground">{string}</p>
}

================
File: src/components/lib/AnimateUnmount.tsx
================
import { useEffect, useState } from "react"

export default function AnimateUnmount({
  active,
  children,
  animationOpen = "slideFadeInFromTop",
  animationClose = "slideFadeOutToTop",
  openDuration = "300ms",
  closeDuration = "150ms",
}: {
  active: boolean
  children: React.ReactNode
  animationOpen?: string
  animationClose?: string
  openDuration?: string
  closeDuration?: string
}) {
  const [shouldShow, setShouldShow] = useState(active)

  useEffect(() => {
    if (active) setShouldShow(true)
  }, [active])

  const onAnimationEnd = () => {
    if (!active) setShouldShow(false)
  }
  return (
    shouldShow && (
      <div
        style={{
          animation: `${active ? `${animationOpen} ${openDuration} forwards` : `${animationClose} ${closeDuration} forwards`}`,
        }}
        onAnimationEnd={onAnimationEnd}
      >
        {children}
      </div>
    )
  )
}

================
File: src/components/lib/Loading.tsx
================
export default function Loading({ className }: { className?: string }) {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" className={`${className}`} viewBox="0 0 200 200">
      <circle fill="none" strokeOpacity="1" stroke="currentColor" strokeWidth=".5" cx="100" cy="100" r="0">
        <animate
          attributeName="r"
          calcMode="spline"
          dur="1.2"
          values="1;80"
          keyTimes="0;1"
          keySplines="0 .2 .5 1"
          repeatCount="indefinite"
        />
        <animate
          attributeName="stroke-width"
          calcMode="spline"
          dur="1.2"
          values="0;25"
          keyTimes="0;1"
          keySplines="0 .2 .5 1"
          repeatCount="indefinite"
        />
        <animate
          attributeName="stroke-opacity"
          calcMode="spline"
          dur="1.2"
          values="1;0"
          keyTimes="0;1"
          keySplines="0 .2 .5 1"
          repeatCount="indefinite"
        />
      </circle>
    </svg>
  )
}

================
File: src/components/lifx/Content.tsx
================
import { useState } from "react"
import IndivLight from "./IndivLight"
import { LightData } from "./Lifx"

// is being passed in as lightData prop

export default function Content({
  apiKey,
  lightData,
  setLightData,
  setRateLimit,
}: {
  apiKey: string
  lightData: LightData[]
  setLightData: (lightData: LightData[]) => void
  setRateLimit: (isRateLimit: boolean) => void
}) {
  if (lightData === null) return <></>
  if (lightData.length === 0) return <p>No lights found</p>
  if (lightData.length === 1) {
    const setThisLightData = (lightData: LightData) => {
      setLightData([lightData])
    }

    return (
      <IndivLight
        setRateLimit={setRateLimit}
        setLightData={setThisLightData}
        apiKey={apiKey}
        lightData={lightData[0]}
      />
    )
  }
  return (
    <div>
      <h1>LIFX</h1>
      <div className=""></div>
    </div>
  )
}

================
File: src/components/lifx/IndivLight.tsx
================
import { DropletIcon, PowerIcon, Rainbow, SunIcon, ThermometerIcon } from "lucide-react"
import { LightData } from "./Lifx"
import { useContext, useEffect, useRef, useState } from "react"
import "./lifxStyles.css"
import { Button } from "../ui/button"
import { LifxRecentColorsContext } from "@/context/integrations/Lifx"
import { Separator } from "../ui/separator"

const kelvin_table = {
  1500: "hsl(21, 100%, 50%)",
  1600: "hsl(22, 100%, 50%)",
  1700: "hsl(23, 100%, 50%)",
  1800: "hsl(24, 100%, 50%)",
  1900: "hsl(25, 100%, 50%)",
  2000: "hsl(28, 100%, 54%)",
  2100: "hsl(29, 100%, 56%)",
  2200: "hsl(30, 100%, 59%)",
  2300: "hsl(31, 100%, 61%)",
  2400: "hsl(32, 100%, 62%)",
  2500: "hsl(33, 100%, 64%)",
  2600: "hsl(33, 100%, 65%)",
  2700: "hsl(34, 100%, 67%)",
  2800: "hsl(35, 100%, 68%)",
  2900: "hsl(35, 100%, 70%)",
  3000: "hsl(36, 100%, 71%)",
  3100: "hsl(36, 100%, 72%)",
  3200: "hsl(37, 100%, 74%)",
  3300: "hsl(37, 100%, 75%)",
  3400: "hsl(38, 100%, 76%)",
  3500: "hsl(38, 100%, 77%)",
  3600: "hsl(39, 100%, 78%)",
  3700: "hsl(39, 100%, 79%)",
  3800: "hsl(39, 100%, 80%)",
  3900: "hsl(40, 100%, 81%)",
  4000: "hsl(40, 100%, 82%)",
  4100: "hsl(41, 100%, 83%)",
  4200: "hsl(41, 100%, 84%)",
  4300: "hsl(41, 100%, 85%)",
  4400: "hsl(42, 100%, 85%)",
  4500: "hsl(42, 100%, 86%)",
  4600: "hsl(42, 100%, 87%)",
  4700: "hsl(43, 100%, 88%)",
  4800: "hsl(43, 100%, 88%)",
  4900: "hsl(43, 100%, 89%)",
  5000: "hsl(43, 100%, 90%)",
  5100: "hsl(44, 100%, 90%)",
  5200: "hsl(44, 100%, 91%)",
  5300: "hsl(44, 100%, 91%)",
  5400: "hsl(44, 100%, 92%)",
  5500: "hsl(44, 100%, 92%)",
  5600: "hsl(45, 100%, 93%)",
  5700: "hsl(45, 100%, 93%)",
  5800: "hsl(45, 100%, 94%)",
  5900: "hsl(45, 100%, 94%)",
  6000: "hsl(45, 100%, 95%)",
  6100: "hsl(46, 100%, 95%)",
  6200: "hsl(0, 100%, 98%)",
  6300: "hsl(300, 100%, 98%)",
  6400: "hsl(240, 100%, 99%)",
  6500: "hsl(180, 100%, 99%)",
  6600: "hsl(300, 100%, 100%)",
  6700: "hsl(300, 100%, 99%)",
  6800: "hsl(240, 100%, 99%)",
  6900: "hsl(240, 100%, 98%)",
  7000: "hsl(240, 100%, 98%)",
  7100: "hsl(240, 100%, 97%)",
  7200: "hsl(240, 100%, 97%)",
  7300: "hsl(240, 100%, 97%)",
  7400: "hsl(240, 100%, 96%)",
  7500: "hsl(240, 100%, 96%)",
  7600: "hsl(240, 100%, 96%)",
  7700: "hsl(240, 100%, 95%)",
  7800: "hsl(240, 100%, 95%)",
  7900: "hsl(240, 100%, 95%)",
  8000: "hsl(240, 100%, 94%)",
  8100: "hsl(240, 100%, 94%)",
  8200: "hsl(240, 100%, 94%)",
  8300: "hsl(240, 100%, 93%)",
  8400: "hsl(240, 100%, 93%)",
  8500: "hsl(240, 100%, 93%)",
  8600: "hsl(240, 100%, 93%)",
  8700: "hsl(240, 100%, 92%)",
  8800: "hsl(240, 100%, 92%)",
  8900: "hsl(240, 100%, 92%)",
  9000: "hsl(240, 100%, 92%)",
}

export default function IndivLight({
  lightData,
  setLightData,
  apiKey,
  setRateLimit,
}: {
  lightData: LightData
  setLightData: (ligthData: LightData) => void
  apiKey: string
  setRateLimit: (isRateLimit: boolean) => void
}) {
  const { lifxRecentColors, setLifxRecentColors } = useContext(LifxRecentColorsContext)
  const [colorData, setColorData] = useState({
    hue: lightData.color.hue,
    saturation: lightData.color.saturation * 100,
    kelvin: lightData.color.kelvin,
    brightness: lightData.brightness * 100,
  })
  const [isKelvin, setIsKelvin] = useState(lightData.color.saturation === 0)
  const [isChangingPower, setIsChangingPower] = useState(false)
  const isUpdatingColor = useRef(false)
  const prevSaturation = useRef(lightData.color.saturation)

  // set all css vars appropriately
  useEffect(() => {
    document.documentElement.style.setProperty("--hue", `${colorData.hue}`)
    document.documentElement.style.setProperty("--saturation", `${Math.max(Math.min(100, colorData.saturation), 10)}%`)
    document.documentElement.style.setProperty(
      "--brightness",
      `${Math.max(Math.min(50, colorData.brightness / 2), 5)}%`,
    )
    document.documentElement.style.setProperty("--kelvin-color", kelvin_table[colorData.kelvin])
    document.documentElement.style.setProperty(
      "--kelvin-brightness",
      `${Math.min(Math.max(colorData.brightness, 5), 100)}%`,
    )
  }, [lightData])

  const handleTogglePower = async () => {
    setIsChangingPower(true)
    const res = await fetch(`https://api.lifx.com/v1/lights/${lightData.id}/toggle`, {
      method: "POST",
      headers: {
        accept: "application/json",
        "content-type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({ duration: 0.3 }),
    })
    if (res.status === 429) {
    }
    const data = await res.json()
    setIsChangingPower(false)
    setLightData({
      ...lightData,
      isOn: data.results[0].power === "on",
    })
  }

  const updateColor = async (
    data: { kelvin: number; hue: number; saturation: number; brightness: number },
    skipRecent?: boolean,
  ) => {
    if (isUpdatingColor.current) return
    isUpdatingColor.current = true
    const res = await fetch(`https://api.lifx.com/v1/lights/${lightData.id}/state`, {
      method: "PUT",
      headers: {
        accept: "application/json",
        "content-type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        power: "on",
        duration: 0.3,
        fast: true,
        color: `hue:${data.hue} saturation:${data.saturation / 100} brightness:${data.brightness / 100} kelvin:${data.kelvin}`,
      }),
    })
    if (res.status === 429) {
      isUpdatingColor.current = false
      setRateLimit(true)
    }
    if (res.status === 202) {
      setColorData(data)
      isUpdatingColor.current = false
      if (skipRecent) return
      if (lifxRecentColors.length >= 8) {
        const newColors = [...lifxRecentColors]
        newColors.pop()
        if (data.saturation === 0) {
          newColors.unshift({
            kelvin: data.kelvin,
            brightness: data.brightness,
          })
        } else {
          newColors.unshift({
            hue: data.hue,
            saturation: data.saturation,
            brightness: data.brightness,
          })
        }
        setLifxRecentColors(newColors)
      } else {
        if (data.saturation === 0) {
          setLifxRecentColors([
            {
              kelvin: data.kelvin,
              brightness: data.brightness,
            },
            ...lifxRecentColors,
          ])
        } else {
          setLifxRecentColors([
            {
              hue: data.hue,
              saturation: data.saturation,
              brightness: data.brightness,
            },
            ...lifxRecentColors,
          ])
        }
      }
    } else {
      isUpdatingColor.current = false
      console.log("error")
    }
  }

  return (
    <div>
      <span className="flex items-center justify-between">
        <span>
          <h1 className="text-2xl font-bold leading-5">{lightData.name}</h1>
          {lightData.group ? <p className="font-light text-muted-foreground">{lightData.group.name}</p> : null}
        </span>
        <button
          onClick={handleTogglePower}
          className={`rounded-full p-2.5 transition-colors ${isChangingPower ? "animate-pulse bg-primary/50 text-background" : lightData.isOn ? "bg-primary text-background hover:bg-primary/80 active:bg-primary/60" : "bg-background text-primary ring-2 ring-border hover:bg-primary/10 active:bg-primary/20"}`}
        >
          <PowerIcon className="h-6 w-6" />
        </button>
      </span>
      <Separator className="my-2" />
      <div
        className={`flex justify-between gap-8 transition-opacity ${lightData.isOn ? "" : "pointer-events-none opacity-50"}`}
      >
        <div className="flex-shrink-0">
          <span className="flex items-center gap-2 rounded-lg border p-1">
            <Button
              onClick={() => {
                prevSaturation.current = colorData.saturation
                setColorData({ ...colorData, saturation: 0 })
                setIsKelvin(true)
              }}
              variant={isKelvin ? "default" : "secondary"}
            >
              Kelvin
            </Button>
            <Button
              onClick={() => {
                prevSaturation.current = colorData.saturation
                setColorData({ ...colorData, saturation: prevSaturation.current ? prevSaturation.current : 100 })
                setIsKelvin(false)
              }}
              variant={isKelvin ? "secondary" : "default"}
            >
              Color
            </Button>
          </span>
          <div className="flex items-center justify-center gap-4">
            {isKelvin ? (
              <>
                <BrightnessKelvinSlider
                  toUpdate={(e: number) => {
                    updateColor({ ...colorData, brightness: e })
                  }}
                  data={colorData.brightness}
                />
                <KelvinSlider
                  toUpdate={(e: number) => {
                    setIsKelvin(true)
                    updateColor({ ...colorData, kelvin: e })
                  }}
                  data={colorData.kelvin}
                />
              </>
            ) : (
              <>
                <BrightnessSlider
                  toUpdate={(e: number) => {
                    updateColor({ ...colorData, brightness: e })
                  }}
                  data={colorData.brightness}
                />
                <HueSlider
                  toUpdate={(e: number) => {
                    updateColor({ ...colorData, hue: e })
                  }}
                  data={colorData.hue}
                />
                <SaturationSlider
                  toUpdate={(e: number) => {
                    updateColor({ ...colorData, saturation: e })
                  }}
                  data={colorData.saturation}
                />
              </>
            )}
          </div>
        </div>
        <div className="flex flex-col">
          <h2 className="mb-1 text-xl font-semibold text-muted-foreground">Recent colors</h2>
          <div className="grid auto-rows-auto grid-cols-4 gap-2">
            {lifxRecentColors.map((color, index) => {
              if (color.kelvin) {
                return (
                  <div
                    onClick={() => {
                      updateColor(
                        {
                          hue: 0,
                          saturation: 0,
                          brightness: color.brightness,
                          kelvin: color.kelvin,
                        },
                        true,
                      )
                    }}
                    key={"pc_" + index}
                    tabIndex={0}
                    className="h-8 w-8 cursor-pointer rounded"
                    style={{ backgroundColor: kelvin_table[color.kelvin], filter: `brightness(${color.brightness}%)` }}
                  ></div>
                )
              } else {
                return (
                  <div
                    onClick={() => {
                      updateColor(
                        {
                          hue: color.hue,
                          saturation: color.saturation,
                          brightness: color.brightness,
                          kelvin: 5000,
                        },
                        true,
                      )
                    }}
                    key={"pc_" + index}
                    tabIndex={0}
                    className="h-8 w-8 cursor-pointer rounded"
                    style={{ backgroundColor: `hsl(${color.hue}, ${color.saturation}%, ${color.brightness / 2}%)` }}
                  ></div>
                )
              }
            })}
          </div>
          <Button className="mt-auto" variant="outline">
            Save to pallete
          </Button>
        </div>
      </div>
    </div>
  )
}

const KelvinSlider = ({ toUpdate, data }) => {
  const [value, setValue] = useState<number>(data)

  const onKelvinChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    document.documentElement.style.setProperty("--kelvin-color", `${kelvin_table[e.target.value]}`)
    setValue(parseInt(e.target.value))
  }

  return (
    <div className="mt-2 flex flex-col items-center gap-1">
      <ThermometerIcon className="h-5 w-5 text-muted-foreground" />
      <input
        min={1500}
        max={9000}
        step={100}
        onChange={(e) => {
          onKelvinChange(e)
        }}
        onMouseUp={(e) => {
          toUpdate(e.currentTarget.value)
        }}
        value={value}
        type="range"
        className="kelvinSlider customSlider"
      />
      <p className="min-w-10 text-center text-xs font-light text-muted-foreground">{value}K</p>
    </div>
  )
}

const BrightnessKelvinSlider = ({ toUpdate, data }) => {
  const [value, setValue] = useState<number>(data)

  const onBrightnessKelvinChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const targetBrightness = Math.min(Math.max(parseInt(e.target.value), 5), 100)
    console.log(targetBrightness)
    document.documentElement.style.setProperty("--kelvin-brightness", `${targetBrightness}%`)
    setValue(parseInt(e.target.value))
  }

  return (
    <div className="mt-2 flex flex-col items-center gap-1">
      <SunIcon className="h-5 w-5 text-muted-foreground" />
      <input
        min={1}
        max={100}
        step={1}
        onChange={(e) => {
          onBrightnessKelvinChange(e)
        }}
        onMouseUp={(e) => {
          toUpdate(e.currentTarget.value)
        }}
        value={value}
        type="range"
        className="brightnessKelvinSlider customSlider"
      />
      <p className="min-w-7 text-center text-xs font-light text-muted-foreground">{value}%</p>
    </div>
  )
}

const BrightnessSlider = ({ toUpdate, data }) => {
  const [value, setValue] = useState<number>(data)

  const onBrightnessChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const targetLightness = Math.max(Math.min(50, parseInt(e.target.value) / 2), 5)
    document.documentElement.style.setProperty("--brightness", `${targetLightness}%`)
    setValue(parseInt(e.target.value))
  }

  return (
    <div className="mt-2 flex flex-col items-center gap-1">
      <SunIcon className="h-5 w-5 text-muted-foreground" />
      <input
        min={1}
        max={100}
        step={1}
        onChange={(e) => {
          onBrightnessChange(e)
        }}
        onMouseUp={(e) => {
          toUpdate(e.currentTarget.value)
        }}
        value={value}
        type="range"
        className="brightnessBg customSlider"
      />
      <p className="min-w-7 text-center text-xs font-light text-muted-foreground">{value}%</p>
    </div>
  )
}

const HueSlider = ({ toUpdate, data }) => {
  const [value, setValue] = useState<number>(data)

  const onHueChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    document.documentElement.style.setProperty("--hue", e.target.value)
    setValue(parseInt(e.target.value))
  }

  return (
    <div className="mt-2 flex flex-col items-center gap-1">
      <Rainbow className="h-5 w-5 text-muted-foreground" />
      <input
        min={0}
        max={360}
        step={1}
        onChange={(e) => {
          onHueChange(e)
        }}
        onMouseUp={(e) => {
          toUpdate(e.currentTarget.value)
        }}
        value={value}
        type="range"
        className="hueSlider customSlider"
      />
      <p className="min-w-7 text-center text-xs font-light text-muted-foreground">{value}&deg;</p>
    </div>
  )
}

const SaturationSlider = ({ toUpdate, data }) => {
  const [value, setValue] = useState<number>(data)

  const onSaturationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const targetSaturation = Math.max(Math.min(100, parseInt(e.target.value)), 10)
    document.documentElement.style.setProperty("--saturation", `${targetSaturation}%`)
    setValue(parseInt(e.target.value))
  }

  return (
    <div className="mt-2 flex flex-col items-center gap-1">
      <DropletIcon className="h-5 w-5 text-muted-foreground" />
      <input
        min={0}
        max={100}
        step={1}
        onChange={(e) => {
          onSaturationChange(e)
        }}
        onMouseUp={(e) => {
          toUpdate(e.currentTarget.value)
        }}
        value={value}
        type="range"
        className="saturationSlider customSlider"
      />
      <p className="min-w-7 text-center text-xs font-light text-muted-foreground">{value}%</p>
    </div>
  )
}

================
File: src/components/lifx/Lifx.tsx
================
import { LightbulbIcon } from "lucide-react"
import { useContext, useEffect, useMemo, useState } from "react"
import AnimateUnmount from "../lib/AnimateUnmount"
import Content from "./Content"
import { LifxApiKeyContext, LifxEnabledContext } from "@/context/integrations/Lifx"
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover"

// code 429 is rate limit, 60 sec wait time

export type LightData = {
  id: string
  name: string
  isOn: boolean
  group?: {
    id: string
    name: string
  }
  color: {
    hue: number
    saturation: number
    kelvin: number
  }
  brightness: number
  connected: boolean
}

export default function Lifx() {
  const [isOpen, setIsOpen] = useState(false)
  const [lightData, setLightData] = useState<LightData[] | null>(null)
  const [isRateLimit, setIsRateLimit] = useState(false)
  const { lifxEnabled } = useContext(LifxEnabledContext)
  const { lifxApiKey } = useContext(LifxApiKeyContext)

  const requestHeaders = useMemo(
    () => ({
      accept: "application/json",
      Authorization: `Bearer ${lifxApiKey}`,
    }),
    [lifxApiKey],
  )

  useEffect(() => {
    const fetchLightData = async () => {
      const res = await fetch("https://api.lifx.com/v1/lights/all", {
        method: "GET",
        headers: requestHeaders,
      })
      if (res.status === 429) {
        setIsRateLimit(true)
        return
      }
      const data = await res.json()
      console.log(data)
      setLightData(
        data.map((light: any) => ({
          id: light.id,
          name: light.label,
          isOn: light.power === "on",
          group: light.group,
          color: light.color,
          brightness: light.brightness,
          connected: light.connected,
        })),
      )
    }
    if (lifxEnabled) {
      fetchLightData()
    }
  }, [lifxEnabled, lifxApiKey])

  if (!lifxEnabled) return null
  return (
    <Popover onOpenChange={setIsOpen}>
      <PopoverTrigger
        className={`${isOpen ? "text-foreground" : "text-muted-foreground hover:text-foreground"} group cursor-pointer rounded-lg p-2 transition-colors`}
      >
        <LightbulbIcon
          className={`h-12 w-12 transition-transform ${isOpen ? "translate-y-0 scale-100" : "translate-y-3 scale-[60%] group-hover:translate-y-1 group-hover:scale-[70%]"}`}
        />
      </PopoverTrigger>
      {/* content */}
      <PopoverContent
        onOpenAutoFocus={(e) => {
          e.preventDefault()
        }}
        sideOffset={8}
        collisionPadding={16}
        className="w-auto p-3"
      >
        <Content setRateLimit={setIsRateLimit} lightData={lightData} setLightData={setLightData} apiKey={lifxApiKey} />
      </PopoverContent>
    </Popover>
  )
}

================
File: src/components/lifx/lifxStyles.css
================
:root {
  --hue: 0;
  --saturation: 100%;
  --brightness: 50%;
  --kelvin-color: hsl(0, 5%, 100%);
  --kelvin-brightness: 100%;
}

.customSlider {
  margin-top: 0 !important;
  appearance: none;
  cursor: pointer;
  writing-mode: vertical-lr;
  direction: rtl;
  margin-top: 10px;
  height: 200px;
  background: transparent;
  width: 30px;
}
.customSlider::-webkit-slider-runnable-track {
  width: 100%;
  border: 0;
  border-radius: 30px;
}
.customSlider::-webkit-slider-thumb {
  appearance: none;
  transform: scale(1.2);
  width: 30px;
  height: 30px;
  border-radius: 30px;
  border: solid 2px hsl(var(--border));
  cursor: pointer;
}
.brightnessBg::-webkit-slider-runnable-track {
  background: linear-gradient(
    to top,
    hsl(var(--hue), var(--saturation), 5%),
    hsl(var(--hue), var(--saturation), 25%),
    hsl(var(--hue), var(--saturation), 50%)
  );
}
.hueSlider::-webkit-slider-runnable-track {
  background: linear-gradient(
    to top,
    hsl(0, var(--saturation), var(--brightness)),
    hsl(60, var(--saturation), var(--brightness)),
    hsl(120, var(--saturation), var(--brightness)),
    hsl(180, var(--saturation), var(--brightness)),
    hsl(240, var(--saturation), var(--brightness)),
    hsl(300, var(--saturation), var(--brightness)),
    hsl(360, var(--saturation), var(--brightness))
  );
}
.hueSlider::-webkit-slider-thumb {
  background-color: hsl(var(--hue), var(--saturation), 50%);
}
.saturationSlider::-webkit-slider-runnable-track {
  background: linear-gradient(to top, hsl(var(--hue), 5%, var(--brightness)), hsl(var(--hue), 100%, var(--brightness)));
}
.saturationSlider::-webkit-slider-thumb {
  background-color: hsl(var(--hue), var(--saturation), 50%);
}
.brightnessKelvinSlider::-webkit-slider-runnable-track {
  background: linear-gradient(to top, hsl(0, 0%, 5%), var(--kelvin-color));
}
.brightnessKelvinSlider::-webkit-slider-thumb {
  background-color: var(--kelvin-color);
  filter: brightness(var(--kelvin-brightness));
}
.kelvinSlider::-webkit-slider-runnable-track {
  background: linear-gradient(
    to top,
    hsl(21, 100%, 50%),
    hsl(25, 100%, 50%),
    hsl(33, 100%, 64%),
    hsl(36, 100%, 71%),
    hsl(38, 100%, 77%),
    hsl(40, 100%, 82%),
    hsl(42, 100%, 86%),
    hsl(43, 100%, 90%),
    hsl(44, 100%, 92%),
    hsl(45, 100%, 95%),
    hsl(180, 100%, 99%),
    hsl(240, 100%, 98%),
    hsl(240, 100%, 96%),
    hsl(240, 100%, 94%),
    hsl(240, 100%, 93%),
    hsl(240, 100%, 92%)
  );
  filter: brightness(var(--kelvin-brightness));
}
.kelvinSlider::-webkit-slider-thumb {
  background-color: var(--kelvin-color);
}

================
File: src/components/notepad/Content.tsx
================
export default function Content() {
  return <div></div>
}

================
File: src/components/notepad/Notepad.tsx
================
import { PencilIcon } from "lucide-react"
import { useState } from "react"
import AnimateUnmount from "../lib/AnimateUnmount"
import Content from "./Content"

export default function Notepad() {
  const [isOpen, setIsOpen] = useState(true)
  return (
    <div className="fixed bottom-24 right-4">
      <div className="relative">
        <button
          onClick={() => {
            setIsOpen(!isOpen)
          }}
          className="group cursor-pointer rounded-lg p-1 text-muted-foreground transition-colors duration-75 hover:bg-foreground/10"
        >
          <PencilIcon className="h-12 w-12" />
        </button>
        {/* content */}
        <AnimateUnmount
          animationOpen="slideDownExpandFadeIn"
          animationClose="slideUpShrinkFadeOut"
          closeDuration="100ms"
          active={isOpen}
        >
          <div className="absolute bottom-20 right-0 rounded-lg border bg-card p-3">
            <Content />
          </div>
        </AnimateUnmount>
      </div>
    </div>
  )
}

================
File: src/components/search/getHistory.ts
================
export const getHistory = () => {
  return new Promise((resolve, reject) => {
    const timeAgo = new Date().getTime() - 1000 * 60 * 60 * 24 * 7
    const params = {
      text: "",

      startTime: timeAgo,
    }
    chrome.history.search(params).then((results) => {
      const items = processHistory(results)
      resolve(items)
    })
  })
}

type HistoryEntry = {
  name: string
  url: string
}

const processHistory = (results) => {
  const entries: HistoryEntry = results.map((entry) => {
    return {
      name: entry.title,
      url: entry.url,
      maxResults: 500,
    }
  })
  return entries
}

================
File: src/components/search/Search.tsx
================
import { useContext, useEffect, useRef, useState } from "react"
import { Input } from "../ui/input"
import AnimateUnmount from "../lib/AnimateUnmount"
import { shortcutsContext } from "@/context/shortcuts/Shortcuts"
import fuzzysort from "fuzzysort"
import ImageDisplay from "../shortcuts/ImageDisplay"
import { getHistory } from "./getHistory"
import { SearchXIcon } from "lucide-react"
import { Separator } from "../ui/separator"

const GoogleSVG = ({ className }: { className: string }) => {
  return (
    <svg className={className} fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" viewBox="0 0 24 24">
      <path d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z" />
    </svg>
  )
}

export default function Search() {
  const { shortcuts, addOneToUseCount } = useContext(shortcutsContext)
  const [searchValue, setSearchValue] = useState("")
  const [isOpen, setIsOpen] = useState(false)
  const [highlightedIndex, setHighlightedIndex] = useState(0)
  const searchContainerRef = useRef(null)
  const inputRef = useRef(null)
  const historyRef = useRef(null)

  useEffect(() => {
    getHistory().then((history) => {
      historyRef.current = history
    })
  }, [])

  // When click is in ref set is open true, otherwise false:
  useEffect(() => {
    const handleClick = (e: MouseEvent) => {
      if (searchContainerRef.current && !searchContainerRef.current.contains(e.target)) {
        setIsOpen(false)
      } else {
        setIsOpen(true)
      }
    }

    document.addEventListener("click", handleClick)
    return () => document.removeEventListener("click", handleClick)
  }, [])

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "Enter") {
        if (!isOpen) {
          setIsOpen(true)
          inputRef.current.focus()
          e.stopPropagation()
        }
      } else if (e.key === "Escape") {
        setIsOpen(false)
        inputRef.current.blur()
      }
    }
    document.addEventListener("keydown", handleKeyDown)
    return () => document.removeEventListener("keydown", handleKeyDown)
  }, [isOpen])

  let shortcutResults = []
  let historyResults = []
  if (searchValue.trim() !== "") {
    shortcutResults = fuzzysort
      .go(searchValue, shortcuts, { limit: 3, keys: ["name", "url"] })
      .map((result) => result.obj)
    historyResults = fuzzysort
      .go(searchValue, historyRef.current, { limit: 3, keys: ["name", "url"] })
      .map((result) => result.obj)
  }

  // use arrow keys to navigate through results using highlighted index state
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (highlightedIndex >= shortcutResults.length + historyResults.length + 1) {
        setHighlightedIndex(shortcutResults.length + historyResults.length)
      }
      if (e.key === "ArrowDown") {
        e.preventDefault()
        setHighlightedIndex((highlightedIndex + 1) % (shortcutResults.length + historyResults.length + 1))
      } else if (e.key === "ArrowUp") {
        e.preventDefault()
        let newVal = (highlightedIndex - 1) % (shortcutResults.length + historyResults.length + 1)
        if (newVal < 0) {
          newVal = newVal + shortcutResults.length + historyResults.length + 1
        }
        setHighlightedIndex(newVal)
      } else if (e.key === "Enter") {
        if (isOpen) {
          if (highlightedIndex === 0) {
            // add 1 to useCount of shortcut
            window.open(`https://www.google.com/search?q=${searchValue}`)
          } else if (highlightedIndex <= shortcutResults.length) {
            const selected = shortcuts.find((shortcut) => shortcut.id === shortcutResults[highlightedIndex - 1].id)
            addOneToUseCount(selected.id)
            window.open(selected.url)
          } else {
            window.open(historyResults[highlightedIndex - shortcutResults.length - 1].url)
          }
        }
      }
    }
    document.addEventListener("keydown", handleKeyDown)
    return () => document.removeEventListener("keydown", handleKeyDown)
  }, [searchValue, highlightedIndex])

  return (
    <div className="relative z-0 mt-4" ref={searchContainerRef}>
      <Input
        ref={inputRef}
        className={`z-20 w-96 text-lg font-medium ${isOpen ? "rounded-t" : "rounded"}`}
        value={searchValue}
        onChange={(e) => setSearchValue(e.target.value)}
        placeholder="Search for anything..."
      />
      <AnimateUnmount active={isOpen && searchValue.trim() !== ""} openDuration="100ms" closeDuration="100ms">
        <div className="absolute left-0 top-0 flex w-96 flex-col rounded-b border-x border-b bg-card p-2">
          <span
            onClick={() => window.open(`https://www.google.com/search?q=${searchValue}`)}
            onMouseEnter={() => setHighlightedIndex(0)}
            className={`flex cursor-pointer items-center gap-2 rounded px-2 py-1 ${highlightedIndex === 0 && "bg-foreground/10"}`}
          >
            <GoogleSVG className="h-5 w-5" /> Search with google
          </span>
          <Separator className="my-2" />
          {shortcutResults.length === 0 && historyResults.length === 0 ? (
            <span className="flex items-center gap-2">
              <SearchXIcon className="h-5 w-5" /> No results found
            </span>
          ) : (
            <>
              {shortcutResults.length === 0 ? (
                <span className="flex items-center gap-2">
                  <SearchXIcon className="h-5 w-5" /> No shortcuts found
                </span>
              ) : (
                <>
                  <span className="border-b font-medium text-muted-foreground">Shortcuts</span>
                  {shortcutResults.map((shortcut, i) => (
                    <div
                      onClick={() => window.open(shortcut.url)}
                      onMouseEnter={() => setHighlightedIndex(i + 1)}
                      key={shortcut.id}
                      className={`flex cursor-pointer items-center gap-2 rounded px-2 py-1 ${highlightedIndex === i + 1 && "bg-foreground/10"}`}
                    >
                      <ImageDisplay url={shortcut.url} className="h-5 w-5 rounded border" />
                      <span className="line-clamp-1">{shortcut.name}</span>
                    </div>
                  ))}
                </>
              )}
              {historyResults.length === 0 ? (
                <span className="flex items-center gap-2">
                  <SearchXIcon className="h-5 w-5" /> No history found
                </span>
              ) : (
                <>
                  <span className="border-b font-medium text-muted-foreground">History</span>
                  {historyResults.map((history, i) => (
                    <div
                      onClick={() => window.open(history.url)}
                      onMouseEnter={() => setHighlightedIndex(i + shortcutResults.length + 1)}
                      key={`${i}_hist`}
                      className={`flex cursor-pointer items-center gap-2 rounded px-2 py-1 ${highlightedIndex === i + shortcutResults.length + 1 && "bg-foreground/10"}`}
                    >
                      <ImageDisplay url={history.url} className="h-5 w-5 rounded border" />
                      <span className="line-clamp-1">{history.name}</span>
                    </div>
                  ))}
                </>
              )}
            </>
          )}
        </div>
      </AnimateUnmount>
    </div>
  )
}

================
File: src/components/settings/appearance/Appearance.tsx
================
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import BackgroundSelector from "./backgrounds/BackgroundSelector"
import ChangeLayout from "./ChangeLayout"

export default function Appearance() {
  return (
    <div className="flex flex-col gap-4">
      <ChangeLayout />
      <Accordion type="multiple">
        <AccordionItem value="background">
          <AccordionTrigger>Background</AccordionTrigger>
          <AccordionContent className="px-1 pt-1">
            <BackgroundSelector />
          </AccordionContent>
        </AccordionItem>
      </Accordion>
    </div>
  )
}

================
File: src/components/settings/appearance/backgrounds/AuraSettings.tsx
================
import Toggle from "@/components/settings/controls/Toggle"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { AuraColorContext, FollowMouseContext } from "@/context/appearance/BackgroundSettings"
import { useContext } from "react"

export default function AuraSettings() {
  return (
    <div className="mb-4 flex flex-col gap-4">
      <label htmlFor="followMouse" className="flex items-center justify-between">
        <span>
          <h2 className="text-lg">Follow cursor</h2>
        </span>
        <Toggle htmlFor="followMouse" ctx={FollowMouseContext} />
      </label>
      <label htmlFor="auraColor" className="grid grid-cols-3 items-center gap-8">
        <span className="col-span-2">
          <h2 className="text-lg">Color</h2>
        </span>
        <ColorSelector />
      </label>
    </div>
  )
}

const ColorSwatch = ({ color1, color2, className = "" }) => {
  return (
    <div
      style={{ backgroundImage: `linear-gradient(45deg, ${color1} 0%, ${color2} 100%)` }}
      className={`${className} h-4 w-4 rounded-full`}
    ></div>
  )
}

const ColorSelector = () => {
  const { auraColor, setAuraColor } = useContext(AuraColorContext)
  return (
    <Select value={auraColor.toString()} onValueChange={(value) => setAuraColor(parseInt(value))}>
      <SelectTrigger>
        <SelectValue />
      </SelectTrigger>
      <SelectContent>
        <SelectItem value="0">
          <span className="flex items-center gap-2">
            <ColorSwatch color1={"#0c313c"} color2={"#301c3b"} />
            Standard
          </span>
        </SelectItem>
        <SelectItem value="1">
          <span className="flex items-center gap-2">
            <ColorSwatch color1={"#d53369"} color2={"#daae51"} />
            Mimosa
          </span>
        </SelectItem>
        <SelectItem value="2">
          <span className="flex items-center gap-2">
            <ColorSwatch color1={"#3F2B96"} color2={"#A8C0FF"} />
            Shady Lane
          </span>
        </SelectItem>
        <SelectItem value="3">
          <span className="flex items-center gap-2">
            <ColorSwatch color1={"#FDBB2D"} color2={"#22C1C3"} />
            Retro
          </span>
        </SelectItem>
        <SelectItem value="4">
          <span className="flex items-center gap-2">
            <ColorSwatch color1={"#FC466B"} color2={"#3F5EFB"} />
            Disco
          </span>
        </SelectItem>
        <SelectItem value="5">
          <span className="flex items-center gap-2">
            <ColorSwatch color1={"rgb(20,20,20)"} color2={"rgb(60,60,60)"} />
            Mono
          </span>
        </SelectItem>
      </SelectContent>
    </Select>
  )
}

================
File: src/components/settings/appearance/backgrounds/BackgroundSelector.tsx
================
import { useContext } from "react"
import { BackgroundMode } from "../../../../context/appearance/Appearance"
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import AuraSettings from "./AuraSettings"
import SolidSettings from "./SolidSettings"
import AnimateUnmount from "@/components/lib/AnimateUnmount"

export default function BackgroundSelector() {
  const { backgroundMode, setBackgroundMode } = useContext(BackgroundMode)
  return (
    <>
      <label className="mb-4 grid grid-cols-3 items-center gap-8">
        <span className="col-span-2">
          <h2 className="text-lg">Background type</h2>
        </span>
        <Select value={backgroundMode} onValueChange={setBackgroundMode}>
          <SelectTrigger>
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectGroup>
              <SelectLabel>Colors</SelectLabel>
              <SelectItem value="solid">Solid</SelectItem>
              <SelectItem value="aura">Aura</SelectItem>
            </SelectGroup>
            <SelectSeparator />
            <SelectGroup>
              <SelectLabel>Coming soon</SelectLabel>
              <SelectItem disabled value="upload">
                Upload
              </SelectItem>
              <SelectItem disabled value="unsplash">
                Unsplash
              </SelectItem>
              <SelectItem disabled value="unsplash">
                Dot Matrix
              </SelectItem>
            </SelectGroup>
          </SelectContent>
        </Select>
      </label>
      <AnimateUnmount closeDuration="0ms" active={backgroundMode === "aura"}>
        <AuraSettings />
      </AnimateUnmount>
      <AnimateUnmount closeDuration="0ms" active={backgroundMode === "solid"}>
        <SolidSettings />
      </AnimateUnmount>
    </>
  )
}

================
File: src/components/settings/appearance/backgrounds/SolidSettings.tsx
================
import { solidBackgroundColors } from "@/components/background/variants/Solid"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { SolidBackgroundColorContext } from "@/context/appearance/BackgroundSettings"
import { useContext } from "react"

const ColorSwatch = ({ color, className = "" }) => {
  return <div style={{ backgroundColor: `rgb(${color.bg.rgb})` }} className={`${className} h-4 w-4 rounded-full`}></div>
}

export default function SolidSettings() {
  const { solidBackgroundColor, setSolidBackgroundColor } = useContext(SolidBackgroundColorContext)
  return (
    <div className="mb-4 flex flex-col gap-4">
      <label htmlFor="auraColor" className="grid grid-cols-3 items-center gap-8">
        <span className="col-span-2">
          <h2 className="text-lg">Color</h2>
        </span>
        <Select
          value={solidBackgroundColor.toString()}
          onValueChange={(value) => setSolidBackgroundColor(parseInt(value))}
        >
          <SelectTrigger>
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="0">
              <span className="flex items-center gap-2">
                <ColorSwatch color={solidBackgroundColors[0]} />
                Red
              </span>
            </SelectItem>
            <SelectItem value="1">
              <span className="flex items-center gap-2">
                <ColorSwatch color={solidBackgroundColors[1]} />
                Orange
              </span>
            </SelectItem>
            <SelectItem value="2">
              <span className="flex items-center gap-2">
                <ColorSwatch color={solidBackgroundColors[2]} />
                Yellow
              </span>
            </SelectItem>
            <SelectItem value="3">
              <span className="flex items-center gap-2">
                <ColorSwatch color={solidBackgroundColors[3]} />
                Green
              </span>
            </SelectItem>
            <SelectItem value="4">
              <span className="flex items-center gap-2">
                <ColorSwatch color={solidBackgroundColors[4]} />
                Blue
              </span>
            </SelectItem>
            <SelectItem value="5">
              <span className="flex items-center gap-2">
                <ColorSwatch color={solidBackgroundColors[5]} />
                Indigo
              </span>
            </SelectItem>
            <SelectItem value="6">
              <span className="flex items-center gap-2">
                <ColorSwatch color={solidBackgroundColors[6]} />
                Purple
              </span>
            </SelectItem>
            <SelectItem value="7">
              <span className="flex items-center gap-2">
                <ColorSwatch color={solidBackgroundColors[7]} />
                Pink
              </span>
            </SelectItem>
            <SelectItem value="8">
              <span className="flex items-center gap-2">
                <ColorSwatch color={solidBackgroundColors[8]} />
                Mono
              </span>
            </SelectItem>
            <SelectItem value="9">
              <span className="flex items-center gap-2">
                <ColorSwatch color={solidBackgroundColors[9]} />
                Mono+
              </span>
            </SelectItem>
          </SelectContent>
        </Select>
      </label>
    </div>
  )
}

================
File: src/components/settings/appearance/ChangeLayout.tsx
================
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { LayoutContext } from "@/context/appearance/Layout"
import { GridIcon, MenuIcon } from "lucide-react"
import { useContext } from "react"

export default function ChangeLayout() {
  const { layout, setLayout } = useContext(LayoutContext)
  return (
    <label htmlFor="auraColor" className="grid grid-cols-3 items-center gap-8">
      <span className="col-span-2">
        <h2 className="text-lg">Color</h2>
      </span>
      <Select value={layout.toString()} onValueChange={(value) => setLayout(parseInt(value))}>
        <SelectTrigger>
          <SelectValue />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="0">
            <span className="flex items-center gap-2">
              <MenuIcon className="h-4 w-4" />
              Stack
            </span>
          </SelectItem>
          <SelectItem value="1">
            <span className="flex items-center gap-2">
              <GridIcon className="h-4 w-4" />
              Classic
            </span>
          </SelectItem>
        </SelectContent>
      </Select>
    </label>
  )
}

================
File: src/components/settings/controls/Toggle.tsx
================
import { Switch } from "@/components/ui/switch"
import { useContext } from "react"

const Toggle = ({ htmlFor, ctx, disabled }: { htmlFor: string; ctx: any; disabled?: boolean }) => {
  const ctxt = useContext(ctx)
  const vals = Object.values(ctxt)
  return <Switch disabled={disabled} id={htmlFor} checked={vals[0]} onCheckedChange={(e) => vals[1](e)} />
}

export default Toggle

================
File: src/components/settings/general/General.tsx
================
import "./styles.css"
import Toggle from "../controls/Toggle"
import { Clock24HourContext, ShowSecondsContext } from "../../../context/general/ClockContext"
import MantraSettings from "./mantras/MantraSettings"
import Greeting from "./greeting/Greeting"
import TodoSettings from "./todo/TodoSettings"
import WeatherSettings from "./weather/WeatherSettings"
import TimerSettings from "./timer/TimerSettings"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"

export default function General() {
  return (
    <Accordion type="multiple">
      <AccordionItem value="clock">
        <AccordionTrigger>Clock</AccordionTrigger>
        <AccordionContent className="px-1">
          <div className="flex flex-col gap-4">
            <label htmlFor="clockFormat" className="flex items-center justify-between">
              <span>
                <h2 className="text-lg">Military time</h2>
                <h3 className="text-muted-foreground">Use 24 hour format</h3>
              </span>
              <Toggle htmlFor="clockFormat" ctx={Clock24HourContext} />
            </label>
            <label htmlFor="showSeconds" className="flex items-center justify-between">
              <span>
                <h2 className="text-lg">Show seconds</h2>
              </span>
              <Toggle htmlFor="showSeconds" ctx={ShowSecondsContext} />
            </label>
          </div>
        </AccordionContent>
      </AccordionItem>
      <AccordionItem value="greeting">
        <AccordionTrigger>Greeting</AccordionTrigger>
        <AccordionContent className="px-1">
          <Greeting />
          <MantraSettings />
        </AccordionContent>
      </AccordionItem>
      <AccordionItem value="todos">
        <AccordionTrigger>Todos</AccordionTrigger>
        <AccordionContent className="px-1">
          <TodoSettings />
        </AccordionContent>
      </AccordionItem>
      <AccordionItem value="weather">
        <AccordionTrigger>Weather</AccordionTrigger>
        <AccordionContent className="px-1">
          <WeatherSettings />
        </AccordionContent>
      </AccordionItem>
      <AccordionItem value="timer">
        <AccordionTrigger>Timer</AccordionTrigger>
        <AccordionContent className="px-1">
          <TimerSettings />
        </AccordionContent>
      </AccordionItem>
    </Accordion>
  )
}

================
File: src/components/settings/general/greeting/CustomGreeting.tsx
================
import { useContext, useState } from "react"
import { CustomGreetingContext } from "../../../../context/general/GreetingContext"
import { Input } from "@/components/ui/input"

export default function CustomGreeting() {
  const { customGreeting, setCustomGreeting } = useContext(CustomGreetingContext)
  const [currentGreeting, setCurrentGreeting] = useState(customGreeting)

  return (
    <Input
      id="customGreeting"
      placeholder="No custom greeting"
      value={currentGreeting}
      onChange={(e) => setCurrentGreeting(e.target.value)}
      onBlur={() => setCustomGreeting(currentGreeting)}
    />
  )
}

================
File: src/components/settings/general/greeting/Greeting.tsx
================
import { useContext } from "react"
import { ShowGreetingContext } from "../../../../context/general/GreetingContext"
import Toggle from "../../controls/Toggle"
import CustomGreeting from "./CustomGreeting"

export default function Greeting() {
  const { showGreeting } = useContext(ShowGreetingContext)
  return (
    <div className="mb-4 flex flex-col gap-4">
      <label htmlFor="showGreeting" className="flex items-center justify-between">
        <span>
          <h2 className="text-lg">Show greeting</h2>
        </span>
        <Toggle htmlFor="showGreeting" ctx={ShowGreetingContext} />
      </label>
      <label
        htmlFor="customGreeting"
        className={`grid grid-cols-3 items-center gap-8 transition-opacity ${!showGreeting && "pointer-events-none opacity-30"}`}
      >
        <span className="col-span-2">
          <h2 className="text-lg">Use custom greeting</h2>
          <h3 className="text-muted-foreground">Leave blank for no custom greeting</h3>
        </span>
        <CustomGreeting />
      </label>
    </div>
  )
}

================
File: src/components/settings/general/mantras/MantraFrequency.tsx
================
import { useContext } from "react"
import { MantraFrequencyContext } from "../../../../context/general/GreetingContext"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

export default function MantraFrequency() {
  const { frequency, setFrequency } = useContext(MantraFrequencyContext)
  return (
    <label className="grid grid-cols-3 items-center gap-8">
      <span className="col-span-2">
        <h2 className="text-lg">Mantra frequncy</h2>
        <h3 className="text-muted-foreground">How often a mantra will appear in place of a greeting</h3>
      </span>
      <Select value={frequency.toString()} onValueChange={setFrequency}>
        <SelectTrigger>
          <SelectValue placeholder="Select a frequency..." />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="0">Never</SelectItem>
          <SelectItem value="1">Rarely</SelectItem>
          <SelectItem value="2">Sometimes</SelectItem>
          <SelectItem value="3">Often</SelectItem>
          <SelectItem value="4">Always</SelectItem>
        </SelectContent>
      </Select>
    </label>
  )
}

================
File: src/components/settings/general/mantras/MantraSettings.tsx
================
import { useContext } from "react"
import { MantraEnabledContext } from "../../../../context/general/GreetingContext"
import Toggle from "../../controls/Toggle"
import MantraFrequency from "./MantraFrequency"
import MantrasUsed from "./MantrasUsed"

export default function MantraSettings() {
  const { mantraEnabled } = useContext(MantraEnabledContext)
  return (
    <div className="flex flex-col gap-4">
      <label htmlFor="clockFormat" className="flex items-center justify-between">
        <span>
          <h2 className="text-lg text-white/90">Show mantras</h2>
          <h3 className="text-white/60">Show a mantra instead of a greeting</h3>
        </span>
        <Toggle htmlFor="clockFormat" ctx={MantraEnabledContext} />
      </label>
      <div className={`flex flex-col gap-4 transition-opacity ${!mantraEnabled && "pointer-events-none opacity-30"}`}>
        <MantraFrequency />
        <MantrasUsed />
      </div>
    </div>
  )
}

================
File: src/components/settings/general/mantras/MantrasUsed.tsx
================
import { useContext, useRef, useState } from "react"
import { MantraOptionsContext, MantrasCurated } from "../../../../context/general/GreetingContext"
import Toggle from "../../controls/Toggle"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { PlusIcon } from "lucide-react"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import AnimateUnmount from "@/components/lib/AnimateUnmount"
import { Separator } from "@/components/ui/separator"

export default function MantrasUsed() {
  const { options, setOptions } = useContext(MantraOptionsContext)
  const [isAdding, setIsAdding] = useState(false)
  const mantraInputRef = useRef<HTMLInputElement | null>(null)
  const submitButtonRef = useRef<HTMLButtonElement | null>(null)
  const [error, setError] = useState<string | null>(null)

  const handleAddMantra = () => {
    if (!mantraInputRef.current || !submitButtonRef.current) {
      return
    }
    const mantra = mantraInputRef.current.value
    // mantra must be more than 4 characters, less than 255 and there must be less than 500 total mantras
    if (mantra.length < 5) {
      setError("Must be more than 4 letters")
      return
    }
    if (mantra.length > 255) {
      setError("Must be less than 255 letters")
      return
    }
    if (options.length >= 500) {
      setError("500 max mantras")
      return
    }
    if (options.includes(mantra)) {
      setError("Mantra already exists")
      return
    }
    setError(null)
    setOptions([mantra, ...options])
    mantraInputRef.current.value = ""
  }

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      handleAddMantra()
    } else if (e.key === "Escape") {
      setIsAdding(false)
      setError(null)
    }
  }

  return (
    <>
      {/* <label htmlFor="mantrasCurated" className="flex items-center justify-between">
        <span>
          <h2 className="text-lg">Include curated mantras</h2>
          <h3 className="text-muted-foreground">1000+ curated mantras mixed in with yours</h3>
        </span>
        <Toggle htmlFor="mantrasCurated" ctx={MantrasCurated} />
      </label> */}
      <Card className="rounded-lg border bg-card">
        <CardHeader className="gap-2 p-4">
          <div className="flex flex-row justify-between">
            <span>
              <CardTitle>Custom mantras</CardTitle>
              <CardDescription>Add your own mantras into the mix</CardDescription>
              {error && <p className="my-1 animate-[fadeScaleIn_.2s_ease-out] text-destructive">{error}</p>}
            </span>
            <Button
              onClick={() => {
                setIsAdding(!isAdding)
                setError(null)
              }}
              variant="secondary"
            >
              {isAdding ? "Cancel" : "Add custom mantra"}
            </Button>
          </div>

          <AnimateUnmount active={isAdding} animationOpen="fadeIn" animationClose="fadeOut">
            <span className="flex items-center gap-2">
              <Input
                onKeyDown={handleKeyDown}
                ref={mantraInputRef}
                type="text"
                placeholder="Enter your custom mantra"
              />
              <Button size="icon" variant="secondary" onClick={handleAddMantra} ref={submitButtonRef}>
                <PlusIcon className="h-4 w-4" />
              </Button>
            </span>
          </AnimateUnmount>
        </CardHeader>
        <Separator />
        <CardContent className="p-4 pb-2 pt-0">
          <div className="mt-2 flex flex-col gap-2">
            {options.map((mantra) => {
              return (
                <div key={mantra} className="flex items-center justify-between">
                  <button
                    className="peer order-2 rounded p-2 text-main/90 hover:bg-surface hover:text-main"
                    onClick={() => {
                      setOptions(options.filter((option) => option !== mantra))
                    }}
                  >
                    <div className="rotate-45">
                      <PlusIcon />
                    </div>
                  </button>
                  <p className="order-1 w-4/5 overflow-hidden truncate overflow-ellipsis text-lg text-main/80 peer-hover:text-main">
                    {mantra}
                  </p>
                </div>
              )
            })}
          </div>
        </CardContent>
      </Card>
    </>
  )
}

================
File: src/components/settings/general/styles.css
================
.accordionTrigger[data-state="open"] .accordionTick1 {
  d: path("M45 9L45 80");
}
.accordionTrigger[data-state="open"] .accordionTick2 {
  d: path("M45 160L45 80");
}

.accordionContent {
  overflow: hidden;
  font-size: 15px;
  color: var(--mauve-11);
  background-color: var(--mauve-2);
}
.accordionContent[data-state="open"] {
  animation: accordionExpand 250ms cubic-bezier(0.87, 0, 0.13, 1);
}
.accordionContent[data-state="closed"] {
  animation: accordionShrink 250ms cubic-bezier(0.87, 0, 0.13, 1);
}

================
File: src/components/settings/general/timer/TimerSettings.tsx
================
import { TimerEnabledContext } from "../../../../context/timer/TimerProvider"
import Toggle from "../../controls/Toggle"

export default function TimerSettings() {
  return (
    <div className="flex flex-col gap-4">
      <label htmlFor="showTodos" className="flex items-center justify-between">
        <span>
          <h2 className="text-lg text-white/90">Show timer</h2>
        </span>
        <Toggle htmlFor="showTodos" ctx={TimerEnabledContext} />
      </label>
    </div>
  )
}

================
File: src/components/settings/general/todo/TodoSettings.tsx
================
import { OpenTodosContext, ShowTodosContext } from "../../../../context/general/TodosContext"
import Toggle from "../../controls/Toggle"

export default function TodoSettings() {
  return (
    <div className="flex flex-col gap-4">
      <label htmlFor="showTodos" className="flex items-center justify-between">
        <span>
          <h2 className="text-lg">Show todos</h2>
        </span>
        <Toggle htmlFor="showTodos" ctx={ShowTodosContext} />
      </label>
      <label htmlFor="openTodos" className="flex items-center justify-between">
        <span>
          <h2 className="text-lg">Open by default</h2>
          <h3 className="text-muted-foreground">Have your todos already open on your new tab</h3>
        </span>
        <Toggle htmlFor="openTodos" ctx={OpenTodosContext} />
      </label>
    </div>
  )
}

================
File: src/components/settings/general/weather/WeatherLocation.tsx
================
import { useContext, useState } from "react"
import { UseAutomaticLocationContext, WeatherLocationContext } from "../../../../context/weather/WeatherProvider"
import { Switch } from "@/components/ui/switch"
import { TriangleAlert } from "lucide-react"

export default function WeatherLocation({ gray }: { gray: boolean }) {
  const [error, setError] = useState<null | string>(null)
  const { useAutomaticLocation, setUseAutomaticLocation } = useContext(UseAutomaticLocationContext)
  const { setWeatherLocation } = useContext(WeatherLocationContext)

  const handleCheckLocation = (e: boolean) => {
    if (e) {
      if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            setUseAutomaticLocation(true)
            setError(null)
            setWeatherLocation({
              lat: position.coords.latitude,
              lon: position.coords.longitude,
              name: "Auto",
            })
          },
          (error) => {
            if (error.code === 1) {
              setError("Location permission denied. Please check browser settings.")
            } else {
              setError("Location unavailable. Please check browser settings.")
            }
          },
        )
      } else {
        setError("Browser doesn't support geolocation.")
      }
    } else {
      setError(null)
      setUseAutomaticLocation(false)
    }
  }

  return (
    <div className="flex flex-col gap-4">
      <label className="flex items-center justify-between" htmlFor="autoWeather">
        <span>
          <h2 className="text-lg">Use GPS location</h2>
          <h3 className="text-muted-foreground">Your location is not stored externally</h3>
        </span>
        <Switch id="autoWeather" checked={useAutomaticLocation} onCheckedChange={handleCheckLocation} />
      </label>
      {error && (
        <span className="-mt-2 flex animate-[fadeScaleIn_.2s_ease-out] items-center gap-2 text-destructive">
          <TriangleAlert className="h-5 w-5" /> {error}
        </span>
      )}
    </div>
  )
}

================
File: src/components/settings/general/weather/WeatherLocationList.tsx
================
import { useContext, useRef, useState } from "react"
import {
  UseAutomaticLocationContext,
  WeatherLocationContext,
  WeatherLocationOptions,
} from "../../../../context/weather/WeatherProvider"
import AnimateUnmount from "../../../lib/AnimateUnmount"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { CheckCircle2, Circle, PlusIcon, TriangleAlert, X } from "lucide-react"
import { Input } from "@/components/ui/input"

const CircleIconWithCheck = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="h-6 w-6">
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M10 0C4.47715 0 0 4.47715 0 10C0 15.5228 4.47715 20 10 20C15.5228 20 20 15.5228 20 10C20 4.47715 15.5228 0 10 0ZM8.75 14.1667L4.16667 9.58333L5.83333 8.41667L8.75 11.3333L14.1667 5.83333L15.8333 7.08333L8.75 14.1667Z"
      />
    </svg>
  )
}

const CircleIconNoCheck = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="h-6 w-6">
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M10 0C4.47715 0 0 4.47715 0 10C0 15.5228 4.47715 20 10 20C15.5228 20 20 15.5228 20 10C20 4.47715 15.5228 0 10 0ZM10 1.66667C14.602 1.66667 18.3333 5.398 18.3333 10C18.3333 14.602 14.602 18.3333 10 18.3333C5.398 18.3333 1.66667 14.602 1.66667 10C1.66667 5.398 5.398 1.66667 10 1.66667Z"
      />
    </svg>
  )
}

export default function WeatherLocationList({ gray }: { gray: boolean }) {
  const [isAdding, setIsAdding] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const { weatherLocationOptions, setWeatherLocationOptions } = useContext(WeatherLocationOptions)
  const { weatherLocation, setWeatherLocation } = useContext(WeatherLocationContext)
  const { useAutomaticLocation } = useContext(UseAutomaticLocationContext)
  const latRef = useRef(null)
  const lonRef = useRef(null)
  const nameRef = useRef(null)

  const handleAddLocation = () => {
    if (!latRef.current || !lonRef.current || !nameRef.current) {
      return
    }
    const lat = parseFloat(latRef.current.value)
    const lon = parseFloat(lonRef.current.value)
    const name = nameRef.current.value
    if (typeof lat !== "number" || isNaN(lat)) {
      setError("Latitude is required")
      return
    }
    if (lat < -90 || lat > 90) {
      setError("Latitude must be between -90 and 90")
      return
    }
    if (typeof lon !== "number" || isNaN(lon)) {
      setError("Longitude is required")
      return
    }
    if (lon < -180 || lon > 180) {
      setError("Longitude must be between -180 and 180")
      return
    }
    if (name.length < 1) {
      setError("Name is required")
      return
    }
    // name must be unqiue and not already in the list
    if (weatherLocationOptions.find((loc) => loc.name === name)) {
      setError("Location must have unique name")
      return
    }
    setWeatherLocationOptions([...weatherLocationOptions, { lat, lon, name }])
    latRef.current.value = ""
    lonRef.current.value = ""
    nameRef.current.value = ""
    setError(null)
    setIsAdding(false)
  }
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      handleAddLocation()
    } else if (e.key === "Escape") {
      setIsAdding(false)
    }
  }

  return (
    <Card
      className={`rounded-lg border bg-card p-0 transition-opacity ${(gray || useAutomaticLocation) && "pointer-events-none opacity-30"}`}
    >
      <CardHeader className="p-4">
        <div className="flex justify-between">
          <span>
            <CardTitle>Weather locations</CardTitle>
            <CardDescription>Add custom saved locations</CardDescription>
          </span>
          <Button
            variant="secondary"
            onClick={() => {
              setIsAdding(!isAdding)
              setError(null)
            }}
          >
            {isAdding ? "Cancel" : "Add location"}
          </Button>
        </div>
        <AnimateUnmount
          active={isAdding}
          animationOpen="fadeIn"
          animationClose="fadeOut"
          openDuration="200ms"
          closeDuration="100ms"
        >
          <div className="flex flex-col gap-1">
            <span className="flex items-center gap-2">
              <label className="flex-grow">
                <p className="text-muted-foreground">Latitude:</p>
                <Input onKeyDown={handleKeyDown} ref={latRef} />
              </label>
              <label className="flex-grow">
                <p className="text-muted-foreground">Longitude:</p>
                <Input onKeyDown={handleKeyDown} ref={lonRef} />
              </label>
            </span>
            <span className="flex items-center gap-2">
              <label className="flex-grow">
                <p className="text-muted-foreground">Location name</p>
                <Input onKeyDown={handleKeyDown} ref={nameRef} />
              </label>
              <label>
                <p className="invisible">.</p>
                <Button onClick={handleAddLocation} size="icon" variant="secondary">
                  <PlusIcon />
                </Button>
              </label>
            </span>
            {error && (
              <span className="flex animate-[fadeScaleIn_.2s_ease-out] items-center gap-2 text-destructive">
                <TriangleAlert className="h-5 w-5" /> {error}
              </span>
            )}
          </div>
        </AnimateUnmount>
      </CardHeader>
      <CardContent className={`flex flex-col gap-2 px-4 pt-0 ${weatherLocationOptions.length !== 0 ? "pb-2" : "pb-0"}`}>
        {weatherLocationOptions.map((location, i) => {
          return (
            <div key={i} className="flex items-center justify-between">
              <span className="peer order-2 flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => {
                    setWeatherLocation(location)
                  }}
                >
                  <div>{weatherLocation.name === location.name ? <CheckCircle2 /> : <Circle />}</div>
                </Button>
                <Button
                  size="icon"
                  variant="ghost"
                  onClick={() => {
                    setWeatherLocationOptions(weatherLocationOptions.filter((_, index) => index !== i))
                  }}
                >
                  <X />
                </Button>
              </span>
              <p className="order-1 w-4/5 overflow-hidden truncate overflow-ellipsis text-lg text-muted-foreground peer-hover:text-foreground">
                {location.name}
              </p>
            </div>
          )
        })}
      </CardContent>
    </Card>
  )
}

================
File: src/components/settings/general/weather/WeatherSettings.tsx
================
import { useContext } from "react"
import { WeatherEnabledContext, WeatherIsCelsiusContext } from "../../../../context/weather/WeatherProvider"
import Toggle from "../../controls/Toggle"
import WeatherLocation from "./WeatherLocation"
import WeatherLocationList from "./WeatherLocationList"

export default function WeatherSettings() {
  const { weatherEnabled } = useContext(WeatherEnabledContext)
  return (
    <div className="flex flex-col gap-4">
      <label htmlFor="showWeather" className="flex items-center justify-between">
        <span>
          <h2 className="text-lg">Show weather</h2>
        </span>
        <Toggle htmlFor="showWeather" ctx={WeatherEnabledContext} />
      </label>
      <div className={`flex flex-col gap-4 transition-opacity ${!weatherEnabled && "pointer-events-none opacity-30"}`}>
        <label htmlFor="useCelsius" className="flex items-center justify-between">
          <span>
            <h2 className="text-lg">Use celsius</h2>
          </span>
          <Toggle htmlFor="useCelsius" ctx={WeatherIsCelsiusContext} />
        </label>
        <WeatherLocation gray={!weatherEnabled} />
        <WeatherLocationList gray={!weatherEnabled} />
      </div>
    </div>
  )
}

================
File: src/components/settings/integrations/Integrations.tsx
================
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import SpotifySettings from "./SpotifySettings"
import LifxSettings from "./lifx/LifxSettings"

export const SpotifyIcon = ({ className }: { className: string }) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} viewBox="0 0 24 24">
    <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z" />
  </svg>
)

export const LifxIcon = ({ className }: { className: string }) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} viewBox="0 0 209 254">
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M209 104.5C209 137.997 193.24 167.812 168.73 186.936C152.092 170.878 129.45 161 104.5 161C79.5504 161 56.9078 170.878 40.2698 186.936C15.7601 167.812 0 137.997 0 104.5C0 46.7863 46.7863 0 104.5 0C162.214 0 209 46.7863 209 104.5ZM185 104.5C185 124.074 178.014 142.016 166.399 155.97C148.508 144.591 127.273 138 104.5 138C81.7265 138 60.4924 144.591 42.6012 155.97C30.9862 142.016 24 124.074 24 104.5C24 60.0411 60.0411 24 104.5 24C148.959 24 185 60.0411 185 104.5Z"
    />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M122.39 236.313C117.499 232.364 111.275 230 104.5 230C98.0331 230 92.0692 232.154 87.2866 235.784L105.103 253.6L122.39 236.313Z"
    />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M138.047 219.424L152.927 204.545C140.089 193.015 123.114 186 104.5 186C85.8431 186 68.8322 193.047 55.9839 204.625L70.8616 219.503C79.8856 211.712 91.6426 207 104.5 207C117.314 207 129.035 211.68 138.047 219.424Z"
    />
  </svg>
)

export default function Integrations() {
  return (
    <Accordion type="multiple" defaultValue={["lifx"]}>
      <AccordionItem value="spotify">
        <AccordionTrigger>
          <span className="flex items-center gap-2">
            <SpotifyIcon className="h-5 w-5 fill-foreground" />
            Spotify
          </span>
        </AccordionTrigger>
        <AccordionContent className="px-1">
          <SpotifySettings />
        </AccordionContent>
      </AccordionItem>
      <AccordionItem value="lifx">
        <AccordionTrigger>
          <span className="flex items-center gap-2">
            <LifxIcon className="h-5 w-5 fill-foreground" />
            LIFX
          </span>
        </AccordionTrigger>
        <AccordionContent className="px-1">
          <LifxSettings />
        </AccordionContent>
      </AccordionItem>
    </Accordion>
  )
}

================
File: src/components/settings/integrations/lifx/LifxSettings.tsx
================
import { LifxApiKeyContext, LifxEnabledContext } from "@/context/integrations/Lifx"
import Toggle from "../../controls/Toggle"
import { useContext, useRef, useState } from "react"
import { Input } from "@/components/ui/input"

export default function LifxSettings() {
  const { lifxEnabled } = useContext(LifxEnabledContext)
  const { lifxApiKey, setLifxApiKey } = useContext(LifxApiKeyContext)
  const [isApiLoading, setIsApiLoading] = useState(false)
  const [apiError, setApiError] = useState(null)
  const inputRef = useRef<null | HTMLInputElement>(null)

  const handleChangeKey = async () => {
    if (!inputRef.current) return
    if (inputRef.current.value.trim() === "") {
      setApiError(null)
      setLifxApiKey(null)
      return
    }
    const key = inputRef.current.value
    // make sure to test key to see if its valid
    const res = await fetch("https://api.lifx.com/v1/lights/all", {
      headers: {
        Authorization: `Bearer ${key}`,
      },
    })
    if (res.status === 401) {
      setApiError("Invalid key")
    } else {
      setLifxApiKey(key)
    }
  }

  return (
    <div className="flex flex-col gap-4">
      <label htmlFor="clockFormat" className="flex items-center justify-between">
        <span>
          <h2 className="text-lg">Enable Lifx</h2>
          <h3 className="text-muted-foreground">Control your lights</h3>
        </span>
        <Toggle htmlFor="clockFormat" ctx={LifxEnabledContext} />
      </label>
      <div
        className={`transition-opacity ${lifxEnabled ? "opacity-100" : "pointer-events-none opacity-50"} flex flex-col gap-4`}
      >
        <div className="grid grid-cols-3 items-center">
          <div className="col-span-2">
            <h2 className="text-lg">LIFX Api key</h2>
            <h3 className="text-muted-foreground">What is this</h3>
            {apiError && <p className="text-red-500">That key is not valid</p>}
          </div>
          <Input onBlur={handleChangeKey} ref={inputRef} placeholder="ABC123" defaultValue={lifxApiKey}></Input>
        </div>
      </div>
    </div>
  )
}

================
File: src/components/settings/integrations/SpotifySettings.tsx
================
import { SpotifyEnabledContext } from "@/context/integrations/Spotify"
import { useContext } from "react"
import Toggle from "../controls/Toggle"
import { initiateSpotifyLogin, logoutSpotify } from "@/utils/spotify"
import { SpotifyIcon } from "./Integrations"

export default function SpotifySettings() {
  const { spotifyEnabled } = useContext(SpotifyEnabledContext)
  const accessToken = localStorage.getItem("spotifyAccessToken")

  return (
    <div className="flex flex-col gap-4">
      <label htmlFor="clockFormat" className="flex items-center justify-between">
        <span>
          <h2 className="text-lg">Enable Spotify</h2>
          <h3 className="text-muted-foreground">See what music you have playing</h3>
        </span>
        <Toggle htmlFor="clockFormat" ctx={SpotifyEnabledContext} />
      </label>
      <div
        className={`transition-opacity ${spotifyEnabled ? "opacity-100" : "pointer-events-none opacity-50"} flex flex-col gap-4`}
      >
        {accessToken ? <LoggedInView /> : <LoggedOutView />}
      </div>
    </div>
  )
}

const LoggedInView = () => {
  return (
    <div className="grid grid-cols-3 items-center">
      <span className="col-span-2">
        <h2 className="text-lg">Logged in</h2>
      </span>
      <button
        className="rounded-md border-2 bg-[#1ED760] px-2 py-2 text-lg font-medium text-background hover:brightness-90"
        onClick={() => logoutSpotify()}
      >
        Log out
      </button>
    </div>
  )
}
const LoggedOutView = () => {
  return (
    <div className="grid grid-cols-5 items-center">
      <span className="col-span-3">
        <h2 className="text-lg">You are not logged in</h2>
        <h3 className="text-muted-foreground">Log in to see your music</h3>
      </span>
      <button
        className="col-span-2 flex items-center justify-center gap-2 rounded-md border-2 bg-[#1ED760] px-2 py-2 text-lg font-medium text-background hover:brightness-90"
        onClick={() => initiateSpotifyLogin()}
      >
        <SpotifyIcon className="h-5 w-5 fill-current" />
        Login with spotify
      </button>
    </div>
  )
}

================
File: src/components/settings/NavigationControl.tsx
================
import * as Tabs from "@radix-ui/react-tabs"
import { useEffect, useRef, useState } from "react"
import Appearance from "./appearance/Appearance"
import General from "./general/General"
import { Separator } from "@/components/ui/separator"
import Shortcuts from "./shortcuts/Shortcuts"
import Integrations from "./integrations/Integrations"

const className = {
  tab: "flex-1 px-3 py-1 m-1 z-10 text-lg data-[state='active']:pointer-events-none text-muted-foreground transition-colors duration-75 rounded hover:bg-secondary/50 cursor-pointer text-center data-[state='active']:text-foreground",
}

export default function NavigationControl() {
  const [currentTab, setCurrentTab] = useState("int")
  const [isSwitchingLeft, setIsSwitchingLeft] = useState(false)
  const tabSlider = useRef(null)
  const handleTabChange = (e) => {
    setCurrentTab((prev) => {
      const newIndex = ["gen", "app", "sho", "int"].indexOf(e)
      const prevIndex = ["gen", "app", "sho", "int"].indexOf(prev)
      if (prevIndex < newIndex) {
        setIsSwitchingLeft(true)
      } else {
        setIsSwitchingLeft(false)
      }
      return e
    })
  }

  useEffect(() => {
    const current = document.querySelector(".selectableTab[data-state='active']") as HTMLDivElement
    if (!current) return
    tabSlider.current.style.width = current.offsetWidth + "px"
    tabSlider.current.style.height = current.offsetHeight + "px"
    tabSlider.current.style.transform = `translateX(${current.offsetLeft}px)`
  }, [currentTab])
  return (
    <Tabs.Root value={currentTab} onValueChange={handleTabChange}>
      <Tabs.List className="sticky left-0 top-0 z-30 -mx-6 -mt-8 bg-card px-6 pt-4">
        <div className="relative mt-4 flex items-center gap-1 rounded">
          <Tabs.Trigger value="gen" className={`selectableTab ${className.tab}`}>
            General
          </Tabs.Trigger>
          <Tabs.Trigger value="app" className={`selectableTab ${className.tab}`}>
            Appearance
          </Tabs.Trigger>
          <Tabs.Trigger value="sho" className={`selectableTab ${className.tab}`}>
            Shortcuts
          </Tabs.Trigger>
          <Tabs.Trigger value="int" className={`selectableTab ${className.tab}`}>
            Integrations
          </Tabs.Trigger>
          <div
            ref={tabSlider}
            className="absolute rounded bg-secondary brightness-[175%] transition-all duration-200"
          ></div>
        </div>
      </Tabs.List>
      <Separator className="my-2" />
      <div className="relative">
        <Tabs.Content className={isSwitchingLeft ? "moveLeft" : "moveRight"} value="gen">
          <General />
        </Tabs.Content>
        <Tabs.Content className={isSwitchingLeft ? "moveLeft" : "moveRight"} value="app">
          <Appearance />
        </Tabs.Content>
        <Tabs.Content className={isSwitchingLeft ? "moveLeft" : "moveRight"} value="sho">
          <Shortcuts />
        </Tabs.Content>
        <Tabs.Content className={isSwitchingLeft ? "moveLeft" : "moveRight"} value="int">
          <Integrations />
        </Tabs.Content>
      </div>
    </Tabs.Root>
  )
}

================
File: src/components/settings/Opener.tsx
================
import * as Dialog from "@radix-ui/react-dialog"
import "./styles.css"
import NavigationControl from "./NavigationControl"

const SettingsCog = () => {
  return (
    <svg width="45" height="45" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M7.07095 0.650238C6.67391 0.650238 6.32977 0.925096 6.24198 1.31231L6.0039 2.36247C5.6249 2.47269 5.26335 2.62363 4.92436 2.81013L4.01335 2.23585C3.67748 2.02413 3.23978 2.07312 2.95903 2.35386L2.35294 2.95996C2.0722 3.2407 2.0232 3.6784 2.23493 4.01427L2.80942 4.92561C2.62307 5.2645 2.47227 5.62594 2.36216 6.00481L1.31209 6.24287C0.924883 6.33065 0.650024 6.6748 0.650024 7.07183V7.92897C0.650024 8.32601 0.924883 8.67015 1.31209 8.75794L2.36228 8.99603C2.47246 9.375 2.62335 9.73652 2.80979 10.0755L2.2354 10.9867C2.02367 11.3225 2.07267 11.7602 2.35341 12.041L2.95951 12.6471C3.24025 12.9278 3.67795 12.9768 4.01382 12.7651L4.92506 12.1907C5.26384 12.377 5.62516 12.5278 6.0039 12.6379L6.24198 13.6881C6.32977 14.0753 6.67391 14.3502 7.07095 14.3502H7.92809C8.32512 14.3502 8.66927 14.0753 8.75705 13.6881L8.99505 12.6383C9.37411 12.5282 9.73573 12.3773 10.0748 12.1909L10.986 12.7653C11.3218 12.977 11.7595 12.928 12.0403 12.6473L12.6464 12.0412C12.9271 11.7604 12.9761 11.3227 12.7644 10.9869L12.1902 10.076C12.3768 9.73688 12.5278 9.37515 12.638 8.99596L13.6879 8.75794C14.0751 8.67015 14.35 8.32601 14.35 7.92897V7.07183C14.35 6.6748 14.0751 6.33065 13.6879 6.24287L12.6381 6.00488C12.528 5.62578 12.3771 5.26414 12.1906 4.92507L12.7648 4.01407C12.9766 3.6782 12.9276 3.2405 12.6468 2.95975L12.0407 2.35366C11.76 2.07292 11.3223 2.02392 10.9864 2.23565L10.0755 2.80989C9.73622 2.62328 9.37437 2.47229 8.99505 2.36209L8.75705 1.31231C8.66927 0.925096 8.32512 0.650238 7.92809 0.650238H7.07095ZM4.92053 3.81251C5.44724 3.44339 6.05665 3.18424 6.71543 3.06839L7.07095 1.50024H7.92809L8.28355 3.06816C8.94267 3.18387 9.5524 3.44302 10.0794 3.81224L11.4397 2.9547L12.0458 3.56079L11.1882 4.92117C11.5573 5.44798 11.8164 6.0575 11.9321 6.71638L13.5 7.07183V7.92897L11.932 8.28444C11.8162 8.94342 11.557 9.55301 11.1878 10.0798L12.0453 11.4402L11.4392 12.0462L10.0787 11.1886C9.55192 11.5576 8.94241 11.8166 8.28355 11.9323L7.92809 13.5002H7.07095L6.71543 11.932C6.0569 11.8162 5.44772 11.5572 4.92116 11.1883L3.56055 12.046L2.95445 11.4399L3.81213 10.0794C3.4431 9.55266 3.18403 8.94326 3.06825 8.2845L1.50002 7.92897V7.07183L3.06818 6.71632C3.18388 6.05765 3.44283 5.44833 3.81171 4.92165L2.95398 3.561L3.56008 2.95491L4.92053 3.81251ZM9.02496 7.50008C9.02496 8.34226 8.34223 9.02499 7.50005 9.02499C6.65786 9.02499 5.97513 8.34226 5.97513 7.50008C5.97513 6.65789 6.65786 5.97516 7.50005 5.97516C8.34223 5.97516 9.02496 6.65789 9.02496 7.50008ZM9.92496 7.50008C9.92496 8.83932 8.83929 9.92499 7.50005 9.92499C6.1608 9.92499 5.07513 8.83932 5.07513 7.50008C5.07513 6.16084 6.1608 5.07516 7.50005 5.07516C8.83929 5.07516 9.92496 6.16084 9.92496 7.50008Z"
        fill="currentColor"
        fillRule="evenodd"
        clipRule="evenodd"
      ></path>
    </svg>
  )
}

export default function Opener() {
  return (
    <Dialog.Root defaultOpen={false}>
      <Dialog.Trigger aria-describedby="etst" asChild>
        <button className="fixed right-4 top-4 rounded-lg p-1 text-muted-foreground transition-colors hover:bg-foreground/10 hover:text-foreground">
          <SettingsCog />
        </button>
      </Dialog.Trigger>
      <Dialog.Overlay
        aria-describedby="test"
        className="overlayAnimate fixed inset-0 z-10 bg-background/50"
      ></Dialog.Overlay>
      <Dialog.Portal>
        <Dialog.Content className="dialogContent customScrollBar absolute right-0 top-0 z-20 h-screen max-h-screen w-[600px] overflow-hidden overflow-y-scroll border-l bg-card px-4">
          <Dialog.Title className="relative z-40 my-6 flex items-center gap-3 text-4xl font-medium text-foreground">
            <div className="gearSpin">
              <SettingsCog />
            </div>
            Settings
          </Dialog.Title>
          <Dialog.Description></Dialog.Description>
          <NavigationControl />
        </Dialog.Content>
      </Dialog.Portal>
    </Dialog.Root>
  )
}

================
File: src/components/settings/shortcuts/CreateShortcut.tsx
================
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { z } from "zod"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { useContext } from "react"
import { shortcutsContext } from "@/context/shortcuts/Shortcuts"
import { generateUuid } from "@/lib/utils"

const schema = z.object({
  name: z.string().min(1, "Name required").max(20, "Max 20 characters"),
  url: z.string().min(1, "URL required"),
})
export default function CreateShortcut({ cancel }: { cancel: () => void }) {
  const { shortcuts, setShortcuts } = useContext(shortcutsContext)
  const form = useForm<z.infer<typeof schema>>({
    resolver: zodResolver(schema),
    defaultValues: {
      name: "",
      url: "",
    },
  })
  const onSubmit = (values: z.infer<typeof schema>) => {
    setShortcuts([{ ...values, id: generateUuid(), useCount: 0 }, ...shortcuts])
    cancel()
  }
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="flex flex-col gap-2">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem className="space-y-0">
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input placeholder="Portfolio" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="url"
          render={({ field }) => (
            <FormItem className="space-y-0">
              <FormLabel>URL</FormLabel>
              <FormControl>
                <Input placeholder="dominicclerici.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <span className="mt-4 flex items-center gap-4">
          <Button
            variant="secondary"
            className="flex-grow-0"
            onClick={(e) => {
              e.preventDefault()
              cancel()
            }}
          >
            Cancel
          </Button>
          <Button className="flex-grow">Create</Button>
        </span>
      </form>
    </Form>
  )
}

================
File: src/components/settings/shortcuts/EditShortcut.tsx
================
import { Button } from "@/components/ui/button"
import { DialogFooter } from "@/components/ui/dialog"
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { shortcutsContext } from "@/context/shortcuts/Shortcuts"
import { zodResolver } from "@hookform/resolvers/zod"
import { DialogClose } from "@radix-ui/react-dialog"
import { useContext } from "react"
import { useForm } from "react-hook-form"
import { z } from "zod"

const schema = z.object({
  name: z.string().min(1, "Name required").max(20, "Max 20 characters"),
  url: z.string().min(1, "URL required"),
})

type EditShortcutProps = {
  setIsOpen: (isOpen: boolean) => void
  shortcut: {
    id: string
    name: string
    url: string
  }
  setShortcuts: (shortcuts: any) => void
}

export default function EditShortcut({ setIsOpen, shortcut, setShortcuts }: EditShortcutProps) {
  const { shortcuts } = useContext(shortcutsContext)
  const form = useForm<z.infer<typeof schema>>({
    resolver: zodResolver(schema),
    defaultValues: {
      name: shortcut.name,
      url: shortcut.url,
    },
  })
  const onSubmit = (values: z.infer<typeof schema>) => {
    setShortcuts(shortcuts.map((item) => (item.id === shortcut.id ? { ...values, id: shortcut.id } : item)))
    setIsOpen(false)
  }
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="flex flex-col gap-2">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem className="space-y-0">
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input placeholder="Portfolio" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="url"
          render={({ field }) => (
            <FormItem className="space-y-0">
              <FormLabel>URL</FormLabel>
              <FormControl>
                <Input placeholder="dominicclerici.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <DialogFooter className="mt-4 flex items-center gap-4">
          <DialogClose asChild>
            <Button variant="secondary" className="flex-grow-0">
              Cancel
            </Button>
          </DialogClose>
          <Button className="flex-grow" type="submit">
            Save
          </Button>
        </DialogFooter>
      </form>
    </Form>
  )
}

================
File: src/components/settings/shortcuts/ShortcutEditor.tsx
================
import AnimateUnmount from "@/components/lib/AnimateUnmount"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { shortcutsContext } from "@/context/shortcuts/Shortcuts"
import { ListOrdered, PencilLine, PlusIcon, TrashIcon } from "lucide-react"
import { useContext, useEffect, useState } from "react"
import CreateShortcut from "./CreateShortcut"
import { restrictToVerticalAxis, restrictToParentElement } from "@dnd-kit/modifiers"

import { DndContext, closestCenter, useSensor, useSensors, PointerSensor } from "@dnd-kit/core"
import { arrayMove, SortableContext, useSortable, verticalListSortingStrategy } from "@dnd-kit/sortable"
import { CSS } from "@dnd-kit/utilities"
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { z } from "zod"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import EditShortcut from "./EditShortcut"

export default function ShortcutEditor() {
  const { shortcuts, setShortcuts } = useContext(shortcutsContext)
  const [isCreating, setIsCreating] = useState(false)

  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === "Escape") {
        setIsCreating(false)
      }
    }
    window.addEventListener("keydown", handleEscape)
    return () => window.removeEventListener("keydown", handleEscape)
  }, [])

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 10,
      },
    }),
  )

  const handleDragEnd = (event) => {
    const { active, over } = event

    if (active.id !== over.id) {
      setShortcuts((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id)
        const newIndex = items.findIndex((item) => item.id === over.id)

        return arrayMove(items, oldIndex, newIndex)
      })
    }
  }

  return (
    <DndContext
      modifiers={[restrictToVerticalAxis, restrictToParentElement]}
      sensors={sensors}
      collisionDetection={closestCenter}
      onDragEnd={handleDragEnd}
    >
      <Card>
        <CardHeader className="space-y-0">
          <span className="flex flex-row items-start justify-between">
            <CardTitle>Shortcuts</CardTitle>
            <span className="mt-0 flex flex-row items-center gap-1">
              <Button variant="outline" className="items-center gap-2" onClick={() => setIsCreating(!isCreating)}>
                <PlusIcon className={`h-4 w-4 transition-transform ${isCreating ? "rotate-45" : "rotate-0"}`} />
                {isCreating ? "Cancel" : "Create"}
              </Button>
            </span>
          </span>
          <AnimateUnmount active={isCreating}>
            <CreateShortcut cancel={() => setIsCreating(false)} />
          </AnimateUnmount>
        </CardHeader>
        <CardContent>
          <SortableContext items={shortcuts} strategy={verticalListSortingStrategy}>
            {shortcuts.map((shortcut) => (
              <SortableShortcutItem key={shortcut.id} shortcut={shortcut} />
            ))}
          </SortableContext>
        </CardContent>
      </Card>
    </DndContext>
  )
}

type ShortcutItemProps = {
  shortcut: {
    id: string
    name: string
    url: string
  }
}

const SortableShortcutItem = ({ shortcut }: ShortcutItemProps) => {
  const { shortcuts, setShortcuts } = useContext(shortcutsContext)
  const [isOpen, setIsOpen] = useState(false)
  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: shortcut.id })

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  }

  const deleteShortcut = () => {
    setShortcuts(shortcuts.filter((item) => item.id !== shortcut.id))
  }

  return (
    <div ref={setNodeRef} style={style} {...attributes} className={`grid cursor-default grid-cols-3 p-1`}>
      <span>{shortcut.name}</span>
      <span>{shortcut.url}</span>
      <span className="flex justify-end gap-1">
        <Button {...listeners} variant="ghost" size="icon">
          <ListOrdered className="h-4 w-4" />
        </Button>
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
          <DialogTrigger asChild>
            <Button variant="ghost" size="icon">
              <PencilLine className="h-4 w-4" />
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Edit Shortcut</DialogTitle>
            </DialogHeader>
            <EditShortcut setIsOpen={setIsOpen} shortcut={shortcut} setShortcuts={setShortcuts} />
          </DialogContent>
        </Dialog>
        <Button onClick={deleteShortcut} variant="ghost" size="icon">
          <TrashIcon className="h-4 w-4" />
        </Button>
      </span>
    </div>
  )
}

================
File: src/components/settings/shortcuts/Shortcuts.tsx
================
import Toggle from "../controls/Toggle"
import ShortcutEditor from "./ShortcutEditor"
import ViewSelector from "./ViewSelector"

export default function Shortcuts() {
  return (
    <div className="flex flex-col gap-4">
      <ViewSelector />
      <ShortcutEditor />
    </div>
  )
}

================
File: src/components/settings/shortcuts/ViewSelector.tsx
================
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { displayModeContext } from "@/context/shortcuts/Shortcuts"
import { LayoutGridIcon, LightbulbIcon, XCircle } from "lucide-react"
import { useContext } from "react"

export default function ViewSelector() {
  const { displayMode, setDisplayMode } = useContext(displayModeContext)
  return (
    <div className="mt-2 flex items-center justify-between">
      <h2 className="text-lg font-medium text-primary">Display mode</h2>
      <Select value={displayMode} onValueChange={setDisplayMode}>
        <SelectTrigger className="max-w-48">
          <SelectValue />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="shown">
            <span className="flex items-center gap-2">
              <LayoutGridIcon className="h-4 w-4" /> Grid
            </span>
          </SelectItem>
          <SelectItem value="suggested">
            <span className="flex items-center gap-2">
              <LightbulbIcon className="h-4 w-4" />
              Suggested
            </span>
          </SelectItem>
          <SelectItem value="hidden">
            <span className="flex items-center gap-2">
              <XCircle className="h-4 w-4" />
              Hidden
            </span>
          </SelectItem>
        </SelectContent>
      </Select>
    </div>
  )
}

================
File: src/components/settings/styles.css
================
.dialogContent[data-state="open"] {
  animation: slideFadeInFromRight 0.25s ease-out;
}
.dialogContent[data-state="closed"] {
  animation: slideFadeOutToRight 0.15s ease-in;
}
.overlayAnimate[data-state="open"] {
  animation: fadeIn 0.2s ease-out;
}
.overlayAnimate[data-state="closed"] {
  animation: fadeOut 0.1s ease-in;
}
.gearSpin {
  animation: spin 0.75s ease-out;
}
.moveLeft[data-state="active"] {
  animation: tabSlideFromLeft 150ms linear backwards;
}
.moveLeft[data-state="inactive"] {
  top: 0;
  left: 0;
  position: absolute;
  width: 100%;
  animation: tabSlideToLeft 150ms linear forwards;
}
.moveRight[data-state="active"] {
  animation: tabSlideFromRight 150ms linear backwards;
}
.moveRight[data-state="inactive"] {
  top: 0;
  right: 0;
  position: absolute;
  width: 100%;
  animation: tabSlideToRight 150ms linear forwards;
}

================
File: src/components/shortcuts/ImageDisplay.tsx
================
import ConnectionWrapper from "@/ConnectionWrapper"

export default function ImageDisplay({ url, className }: { url: string; className?: string }) {
  const handleCantLoad = (e) => {
    e.target.src = "./Icons/externalLink.png"
  }
  return (
    <img
      className={className}
      src={`https://www.google.com/s2/favicons?domain=${url}&sz=32`}
      onError={handleCantLoad}
      alt={`Shortcut icon`}
    />
  )
}

================
File: src/components/shortcuts/Shortcuts.tsx
================
import { displayModeContext } from "@/context/shortcuts/Shortcuts"
import { useContext } from "react"
import DisplayAll from "./stack/DisplayAll"
import Suggested from "./stack/Suggested"

export default function Shortcuts() {
  const { displayMode } = useContext(displayModeContext)
  if (displayMode === "shown") {
    return <DisplayAll />
  } else if (displayMode === "suggested") {
    return <Suggested />
  } else {
    return null
  }
}

================
File: src/components/shortcuts/stack/AllShortcutsDialog.tsx
================
import { DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { shortcutsContext } from "@/context/shortcuts/Shortcuts"
import fuzzysort from "fuzzysort"
import { useContext, useState } from "react"
import ImageDisplay from "../ImageDisplay"

type Shortcut = {
  name: string
  url: string
  id: string
}

export const AllShortcuts = () => {
  const { shortcuts, addOneToUseCount } = useContext(shortcutsContext)
  const [filterInput, setFilterInput] = useState("")

  let results
  if (filterInput.trim() !== "") {
    results = fuzzysort.go(filterInput, shortcuts, { keys: ["name", "url"] }).map((result) => result.obj)
  } else {
    results = shortcuts
  }

  return (
    <DialogContent className="max-w-screen-md">
      <DialogHeader className="flex flex-row items-start justify-center">
        <DialogTitle className="absolute left-7 text-2xl">All shortcuts</DialogTitle>
        <Input
          placeholder="Filter shortcuts..."
          className="max-w-64 flex-grow-0"
          value={filterInput}
          onChange={(e) => setFilterInput(e.target.value)}
        />
      </DialogHeader>
      <div className="grid grid-cols-6 gap-4">
        {results.map((shortcut: Shortcut) => (
          <a
            tabIndex={0}
            href={shortcut.url}
            target="_blank"
            onClick={() => addOneToUseCount(shortcut.id)}
            className="group flex cursor-pointer flex-col items-center gap-1 rounded p-1 transition-colors duration-75 hover:bg-foreground/10"
          >
            <ImageDisplay className="h-8 w-8 rounded" url={shortcut.url} />
            <span className="line-clamp-2 max-w-20 text-center text-sm text-muted-foreground transition-colors duration-75 group-hover:text-foreground">
              {shortcut.name}
            </span>
          </a>
        ))}
      </div>
    </DialogContent>
  )
}

================
File: src/components/shortcuts/stack/DisplayAll.tsx
================
import fuzzysort from "fuzzysort"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { shortcutsContext } from "@/context/shortcuts/Shortcuts"
import { LayoutGridIcon } from "lucide-react"
import { useContext, useState } from "react"
import { Input } from "@/components/ui/input"
import { AllShortcuts } from "./AllShortcutsDialog"
import ImageDisplay from "../ImageDisplay"

type Shortcut = {
  name: string
  url: string
  id: string
  useCount: number
}

export default function DisplayAll() {
  const { shortcuts, addOneToUseCount } = useContext(shortcutsContext)
  // max 10 columns, try to make rows have same amount of columns, so 12 items would have two rows of 6 columns, 15 items would have three rows of 5 columns
  if (shortcuts.length > 18) {
    return (
      <div className="mt-8 grid grid-cols-6 grid-rows-3 gap-2">
        {shortcuts.slice(0, 17).map((shortcut: Shortcut) => (
          <a
            key={shortcut.id}
            tabIndex={0}
            href={shortcut.url}
            target="_blank"
            className="group flex h-min cursor-pointer flex-col items-center gap-1 rounded p-1 transition-colors duration-75 hover:bg-foreground/10"
          >
            <ImageDisplay className="h-8 w-8 rounded" url={shortcut.url} />
            <span className="line-clamp-2 max-w-20 text-center text-sm text-muted-foreground transition-colors duration-75 group-hover:text-foreground">
              {shortcut.name}
            </span>
          </a>
        ))}
        <Dialog>
          <DialogTrigger asChild>
            <div
              tabIndex={0}
              className="group flex h-min cursor-pointer flex-col items-center gap-1 rounded p-1 transition-colors duration-75 hover:bg-foreground/10"
            >
              <LayoutGridIcon className="h-8 w-8" />
              <span className="text-sm text-muted-foreground transition-colors duration-75 group-hover:text-foreground">
                View all
              </span>
            </div>
          </DialogTrigger>
          <AllShortcuts />
        </Dialog>
      </div>
    )
  }
  return (
    <div className="mt-4 grid grid-cols-6 grid-rows-3 gap-2">
      {shortcuts.map((shortcut: Shortcut) => (
        <a
          key={shortcut.id}
          tabIndex={0}
          href={shortcut.url}
          target="_blank"
          onClick={() => addOneToUseCount(shortcut.id)}
          className="group flex h-min cursor-pointer flex-col items-center gap-1 rounded p-1 transition-colors duration-75 hover:bg-foreground/10"
        >
          <ImageDisplay className="h-8 w-8 rounded" url={shortcut.url} />
          <span className="line-clamp-2 max-w-20 text-center text-sm text-muted-foreground transition-colors duration-75 group-hover:text-foreground">
            {shortcut.name}
          </span>
        </a>
      ))}
    </div>
  )
}

================
File: src/components/shortcuts/stack/Suggested.tsx
================
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { shortcutsContext } from "@/context/shortcuts/Shortcuts"
import { LayoutGridIcon } from "lucide-react"
import { useContext } from "react"
import { AllShortcuts } from "./AllShortcutsDialog"
import ImageDisplay from "../ImageDisplay"

type Shortcut = {
  name: string
  url: string
  id: string
  useCount: number
}

export default function Suggested() {
  const { shortcuts, addOneToUseCount } = useContext(shortcutsContext)
  const topUsed = shortcuts.sort((a: Shortcut, b: Shortcut) => b.useCount - a.useCount).slice(0, 5)
  return (
    <div className="mt-4 flex items-center rounded-lg border bg-card p-2">
      <div className="grid grid-cols-5 gap-1 rounded-md">
        {topUsed.map((shortcut: Shortcut) => (
          <TooltipProvider delayDuration={150} key={shortcut.id}>
            <Tooltip>
              <TooltipTrigger>
                <a
                  tabIndex={0}
                  target="_blank"
                  onClick={() => addOneToUseCount(shortcut.id)}
                  href={shortcut.url}
                  className="group flex cursor-pointer flex-col items-center gap-1 rounded p-1 transition-colors duration-75 hover:bg-foreground/10"
                >
                  <ImageDisplay className="h-6 w-6 rounded" url={shortcut.url} />
                </a>
              </TooltipTrigger>
              <TooltipContent side="bottom">
                <span>{shortcut.name}</span>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        ))}
      </div>
      <Dialog>
        <DialogTrigger asChild>
          <div className="ml-3 mr-1 cursor-pointer">
            <LayoutGridIcon className="h-8 w-8 rounded p-1 transition-colors duration-75 hover:bg-foreground/10" />
          </div>
        </DialogTrigger>
        <AllShortcuts />
      </Dialog>
    </div>
  )
}

================
File: src/components/spotify/SpotifyAuthController.tsx
================
import React, { useContext, useEffect, useState } from "react"
import { refreshAccessToken, getSpotifyTokens } from "@/utils/spotify"
import SpotifyMain from "./SpotifyMain"
import { SpotifyEnabledContext } from "@/context/integrations/Spotify"

const SpotifyAuthController: React.FC = () => {
  const { spotifyEnabled } = useContext(SpotifyEnabledContext)
  const [token, setToken] = useState<string | null>(null)

  useEffect(() => {
    if (spotifyEnabled) {
      const refreshTokenF = async (refresh_token: string) => {
        try {
          const data = await refreshAccessToken(refresh_token)
          setToken(data.access_token)
          localStorage.setItem("spotifyAccessToken", data.access_token)
          localStorage.setItem("spotifyTokenExpiry", (Date.now() + data.expires_in * 1000).toString())

          // Set a timer to refresh the token before it expires
          setTimeout(() => refreshTokenF(refresh_token), data.expires_in * 1000 - 60000)
        } catch (error) {
          console.error("Failed to refresh token", error)
          // Handle error - perhaps by initiating a new login
        }
      }

      const { accessToken, refreshToken, tokenExpiry } = getSpotifyTokens()

      if (accessToken && tokenExpiry && Number(tokenExpiry) > Date.now()) {
        setToken(accessToken)
      } else if (refreshToken) {
        refreshTokenF(refreshToken)
      } else {
        console.log("No valid tokens found")
      }
    }
  }, [spotifyEnabled])

  if (!spotifyEnabled) return null
  return <>{token && <SpotifyMain token={token} />}</>
}

export default SpotifyAuthController

================
File: src/components/spotify/SpotifyMain.tsx
================
import { useEffect, useState } from "react"
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover"
import { MusicIcon, PauseIcon, PlayIcon, SkipBackIcon, SkipForwardIcon } from "lucide-react"
import { getCurrentlyPlayingTrack, pausePlayback, resumePlayback, skipToNext, skipToPrevious } from "@/utils/spotifyAPI"
import { Button } from "../ui/button"
import "./spotifyStyle.css"

const AnimatedIcon = ({ isPlaying }: { isPlaying: boolean }) => {
  return (
    <svg className="h-10 w-10 fill-foreground" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 38.05">
      <title>Audio Wave</title>
      <path
        className={isPlaying ? "playing" : "not"}
        id="Line_1"
        d="M0.91,15L0.78,15A1,1,0,0,0,0,16v6a1,1,0,1,0,2,0s0,0,0,0V16a1,1,0,0,0-1-1H0.91Z"
      />
      <path
        className={isPlaying ? "playing" : "not"}
        id="Line_2"
        d="M6.91,9L6.78,9A1,1,0,0,0,6,10V28a1,1,0,1,0,2,0s0,0,0,0V10A1,1,0,0,0,7,9H6.91Z"
      />
      <path
        className={isPlaying ? "playing" : "not"}
        id="Line_3"
        d="M12.91,0L12.78,0A1,1,0,0,0,12,1V37a1,1,0,1,0,2,0s0,0,0,0V1a1,1,0,0,0-1-1H12.91Z"
      />
      <path
        className={isPlaying ? "playing" : "not"}
        id="Line_4"
        d="M18.91,10l-0.12,0A1,1,0,0,0,18,11V27a1,1,0,1,0,2,0s0,0,0,0V11a1,1,0,0,0-1-1H18.91Z"
      />
      <path
        className={isPlaying ? "playing" : "not"}
        id="Line_5"
        d="M24.91,15l-0.12,0A1,1,0,0,0,24,16v6a1,1,0,0,0,2,0s0,0,0,0V16a1,1,0,0,0-1-1H24.91Z"
      />
      <path
        className={isPlaying ? "playing" : "not"}
        id="Line_6"
        d="M30.91,10l-0.12,0A1,1,0,0,0,30,11V27a1,1,0,1,0,2,0s0,0,0,0V11a1,1,0,0,0-1-1H30.91Z"
      />
      <path
        className={isPlaying ? "playing" : "not"}
        id="Line_7"
        d="M36.91,0L36.78,0A1,1,0,0,0,36,1V37a1,1,0,1,0,2,0s0,0,0,0V1a1,1,0,0,0-1-1H36.91Z"
      />
      <path
        className={isPlaying ? "playing" : "not"}
        id="Line_8"
        d="M42.91,9L42.78,9A1,1,0,0,0,42,10V28a1,1,0,1,0,2,0s0,0,0,0V10a1,1,0,0,0-1-1H42.91Z"
      />
      <path
        className={isPlaying ? "playing" : "not"}
        id="Line_9"
        d="M48.91,15l-0.12,0A1,1,0,0,0,48,16v6a1,1,0,1,0,2,0s0,0,0,0V16a1,1,0,0,0-1-1H48.91Z"
      />
    </svg>
  )
}

export default function SpotifyMain({ token }: { token: string }) {
  const [isOpen, setIsOpen] = useState(false)
  const [currentTrack, setCurrentTrack] = useState<any>(null)
  const [isPlaying, setIsPlaying] = useState<boolean>(false)
  const [isFetching, setIsFetching] = useState<boolean>(false)
  useEffect(() => {
    const fetchCurrentTrack = async () => {
      try {
        const data = await getCurrentlyPlayingTrack()
        if (!data) {
          setCurrentTrack(null)
          return
        }
        if (data.item.id !== currentTrack?.id) {
          setCurrentTrack(data.item)
          setIsPlaying(data.is_playing)
        }
      } catch (error) {
        console.error("Error fetching current track:", error)
      }
    }
    fetchCurrentTrack()
    const interval = setInterval(fetchCurrentTrack, 5000) // Update every 5 seconds

    return () => clearInterval(interval)
  }, [token, currentTrack?.id])

  const handlePlayPause = async () => {
    setIsFetching(true)
    try {
      if (isPlaying) {
        await pausePlayback()
      } else {
        await resumePlayback()
      }
      setIsFetching(false)
      setIsPlaying(!isPlaying)
    } catch (error) {
      setIsFetching(false)
      console.error("Error toggling playback:", error)
    }
  }

  const handleNext = async () => {
    setIsFetching(true)
    try {
      await skipToNext()
      setIsFetching(false)
    } catch (error) {
      setIsFetching(false)
      console.error("Error skipping to next track:", error)
    }
  }

  const handlePrevious = async () => {
    setIsFetching(true)
    try {
      await skipToPrevious()
      setIsFetching(false)
    } catch (error) {
      setIsFetching(false)
      console.error("Error skipping to previous track:", error)
    }
  }

  const CurrentlyPlaying = () => {
    if (!currentTrack) {
      return <div>No track currently playing</div>
    }

    const className = {
      buttonIcon: "h-6 w-6 transition-transform scale-90 group-hover:scale-100 group-active:scale-90 duration-75",
    }

    return (
      <div>
        <span className="mb-2 flex items-center gap-2">
          <AnimatedIcon isPlaying={isPlaying} />
          <h2 className="text-2xl font-light text-muted-foreground">Now Playing</h2>
        </span>
        <div className="flex items-center gap-2">
          <div
            className="h-20 w-20 rounded-lg bg-cover bg-center"
            style={{ backgroundImage: `url(${currentTrack.album.images[0].url})` }}
          ></div>

          <span>
            <p className="line-clamp-2 max-w-64 text-xl font-medium leading-5">{currentTrack.name}</p>
            <p className="line-clamp-1 max-w-64 leading-5 text-muted-foreground">
              {currentTrack.artists.map((item: any) => item.name).join(", ")}
            </p>
          </span>
        </div>
        <div className="mt-4 flex items-center gap-4">
          <Button
            disabled={isFetching}
            onClick={handlePrevious}
            variant="outline"
            className="group flex-grow text-muted-foreground hover:text-foreground"
          >
            <SkipBackIcon className={className.buttonIcon} />
          </Button>
          <Button
            disabled={isFetching}
            variant="outline"
            className="group flex-grow text-muted-foreground hover:text-foreground"
            onClick={handlePlayPause}
          >
            {isPlaying ? <PauseIcon className={className.buttonIcon} /> : <PlayIcon className={className.buttonIcon} />}
          </Button>
          <Button
            disabled={isFetching}
            onClick={handleNext}
            variant="outline"
            className="group flex-grow text-muted-foreground hover:text-foreground"
          >
            <SkipForwardIcon className={className.buttonIcon} />
          </Button>
        </div>
      </div>
    )
  }

  return (
    <Popover onOpenChange={setIsOpen}>
      <PopoverTrigger
        className={`${isOpen ? "text-foreground" : "text-muted-foreground hover:text-foreground"} group cursor-pointer rounded-lg p-2 transition-colors`}
      >
        <MusicIcon
          className={`h-12 w-12 transition-transform ${isOpen ? "translate-y-0 scale-100" : "translate-y-3 scale-[60%] group-hover:translate-y-1 group-hover:scale-[70%]"}`}
        />
      </PopoverTrigger>
      <PopoverContent className="w-auto p-3">
        <CurrentlyPlaying />
      </PopoverContent>
    </Popover>
  )
}

================
File: src/components/spotify/spotifyStyle.css
================
#Line_1.playing {
  animation: barPulse 1s infinite both;
  animation-delay: calc(1 * 0.15s);
}
#Line_2.playing {
  animation: barPulse 1s infinite both;
  animation-delay: calc(2 * 0.15s);
}
#Line_3.playing {
  animation: barPulse 1s infinite both;
  animation-delay: calc(3 * 0.15s);
}
#Line_4.playing {
  animation: barPulse 1s infinite both;
  animation-delay: calc(4 * 0.15s);
}
#Line_5.playing {
  animation: barPulse 1s infinite both;
  animation-delay: calc(5 * 0.15s);
}
#Line_6.playing {
  animation: barPulse 1s infinite both;
  animation-delay: calc(6 * 0.15s);
}
#Line_7.playing {
  animation: barPulse 1s infinite both;
  animation-delay: calc(7 * 0.15s);
}
#Line_8.playing {
  animation: barPulse 1s infinite both;
  animation-delay: calc(8 * 0.15s);
}
#Line_9.playing {
  animation: barPulse 1s infinite both;
  animation-delay: calc(9 * 0.15s);
}

@keyframes barPulse {
  0% {
    transform: scaleY(1);
    transform-origin: 50% 50%;
  }

  50% {
    transform: scaleY(0.5);
    transform-origin: 50% 50%;
  }

  100% {
    transform: scaleY(1);
    transform-origin: 50% 50%;
  }
}

================
File: src/components/timer/StopwatchRunning.tsx
================
import { useState, useEffect } from "react"

export const StopwatchRunning = ({ startTime, currentState }: { startTime: number; currentState: string }) => {
  const [timeElapsed, setTimeElapsed] = useState<string | null>(null)
  useEffect(() => {
    const updateTimeElapsed = () => {
      if (currentState === "stopped") return
      if (currentState === "paused") return
      const currentTime = new Date()
      const diff = currentTime.getTime() - startTime
      const hours = Math.floor(diff / 3600000)
      const mins = Math.floor((diff % 3600000) / 60000)
      const secs = Math.floor((diff % 60000) / 1000)
      setTimeElapsed(`${hours}:${mins < 10 ? `0${mins}` : mins}:${secs < 10 ? `0${secs}` : secs}`)
    }
    updateTimeElapsed()
    const interval = setInterval(updateTimeElapsed, 1000)
    return () => clearInterval(interval)
  }, [currentState])
  return (
    <div className={`flex min-w-60 flex-col transition-opacity ${currentState === "paused" && "opacity-50"}`}>
      <h2 className="my-4 text-center text-2xl font-bold">{timeElapsed}</h2>
    </div>
  )
}

================
File: src/components/timer/Timer.tsx
================
import { useContext, useEffect, useRef, useState } from "react"
import { TimerEnabledContext } from "../../context/timer/TimerProvider"
import { Separator } from "../ui/separator"
import { Input } from "../ui/input"
import { Button } from "../ui/button"
import { AlarmClockCheck, Clock12Icon, Clock5, TriangleAlertIcon } from "lucide-react"
import { TimerRunning } from "./TimerRunning"
import { StopwatchRunning } from "./StopwatchRunning"
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover"
// import TimerRunning from "./TimerRunning"

export default function Timer() {
  const [isOpen, setIsOpen] = useState(false)
  const { timerEnabled } = useContext(TimerEnabledContext)
  const inputHours = useRef<HTMLInputElement | null>(null)
  const inputMins = useRef<HTMLInputElement | null>(null)
  const inputSecs = useRef<HTMLInputElement | null>(null)
  const [timerError, setTimerError] = useState<string | null>(null)
  const [timerState, setTimerState] = useState<"running" | "paused" | "stopped">("stopped")
  const timerPausedTime = useRef<Date | null>(null)
  const timerStartTime = useRef<Date | null>(null)
  const timerEndTime = useRef<Date | null>(null)
  const [stopwatchState, setStopwatchState] = useState<"running" | "paused" | "stopped">("stopped")
  const stopwatchPausedTime = useRef<Date | null>(null)
  const stopwatchStartTime = useRef<Date | null>(null)
  const [hasTimerEndAlert, setHasTimerEndAlert] = useState(false)

  useEffect(() => {
    const data = localStorage.getItem("timerData")
    if (data) {
      const parsedData = JSON.parse(data)
      setTimerState(parsedData.timerState)
      timerStartTime.current = new Date(parsedData.timerStartTime)
      timerEndTime.current = new Date(parsedData.timerEndTime)
      if (parsedData.timerState === "paused") {
        timerPausedTime.current = new Date(parsedData.timerPausedTime)
      }
    }
  }, [])

  const handleTimerStart = () => {
    if (inputHours.current && inputMins.current && inputSecs.current) {
      const hours = parseInt(inputHours.current.value) || 0
      const mins = parseInt(inputMins.current.value) || 0
      const secs = parseInt(inputSecs.current.value) || 0
      if (hours + mins + secs === 0) {
        setTimerError("Invalid time")
        return
      }
      const now = new Date()
      timerStartTime.current = now
      timerEndTime.current = new Date(now.getTime() + hours * 3600000 + mins * 60000 + secs * 1000)
      setTimerState("running")
      setTimerError(null)
      localStorage.setItem("lastTimerInput", JSON.stringify({ hours, mins, secs }))
      localStorage.setItem(
        "timerData",
        JSON.stringify({
          timerState: "running",
          timerPausedTime: null,
          timerStartTime: timerStartTime.current,
          timerEndTime: timerEndTime.current,
        }),
      )
    }
  }

  const handleTimerPause = () => {
    timerPausedTime.current = new Date()
    setTimerState("paused")
    setTimerError(null)
    localStorage.setItem(
      "timerData",
      JSON.stringify({
        timerState: "paused",
        timerPausedTime: timerPausedTime.current,
        timerStartTime: timerStartTime.current,
        timerEndTime: timerEndTime.current,
      }),
    )
  }

  const handleTimerUnpause = () => {
    timerEndTime.current = new Date(
      new Date().getTime() + timerEndTime.current.getTime() - timerPausedTime.current.getTime(),
    )
    setTimerState("running")
    setTimerError(null)
    localStorage.setItem(
      "timerData",
      JSON.stringify({
        timerState: "running",
        timerPausedTime: null,
        timerStartTime: timerStartTime.current,
        timerEndTime: timerEndTime.current,
      }),
    )
  }

  const handleTimerEnd = () => {
    timerPausedTime.current = null
    timerEndTime.current = null
    setTimerState("stopped")
    setTimerError(null)
    localStorage.removeItem("timerData")
  }

  const handleStopwatchStart = () => {
    stopwatchStartTime.current = new Date()
    setStopwatchState("running")
  }
  const handleStopwatchPause = () => {
    stopwatchPausedTime.current = new Date()
    setStopwatchState("paused")
  }
  const handleStopwatchUnpause = () => {
    stopwatchStartTime.current = new Date(
      new Date().getTime() + stopwatchStartTime.current.getTime() - stopwatchPausedTime.current.getTime(),
    )
    setStopwatchState("running")
  }
  const handleStopwatchEnd = () => {
    stopwatchPausedTime.current = null
    stopwatchStartTime.current = null
    setStopwatchState("stopped")
  }
  const validateNumber = (input: string, max: number) => {
    // return only numbers if not number return empty string
    const integerNum = parseInt(input.replace(/[^0-9]/g, ""))
    if (integerNum > max) return max.toString()
    return integerNum.toString()
  }

  if (timerEnabled) {
    return (
      <Popover
        onOpenChange={(e) => {
          setIsOpen(e)
          if (hasTimerEndAlert && !e) {
            setHasTimerEndAlert(false)
          }
        }}
      >
        <PopoverTrigger
          className={`group cursor-pointer rounded-lg p-2 transition-colors ${isOpen ? "text-foreground" : "text-muted-foreground hover:text-foreground"} ${hasTimerEndAlert && "animate-timer-alert"}`}
        >
          {hasTimerEndAlert ? (
            <TriangleAlertIcon className="h-10 w-10 text-amber-500" />
          ) : (
            <Clock12Icon
              className={`h-12 w-12 transition-transform ${isOpen ? "translate-y-0 scale-100" : "translate-y-3 scale-[60%] group-hover:translate-y-1 group-hover:scale-[70%]"}`}
            />
          )}
          {/* <div className={`h-10 w-10 rounded ${hasTimerEndAlert ? "bg-red-500" : "bg-white"}`}></div> */}
        </PopoverTrigger>
        {/* content */}
        {/* <AnimateUnmount
          animationOpen="slideUpExpandFadeIn"
          animationClose="slideDownShrinkFadeOut"
          closeDuration="100ms"
          active={isOpen}
        > */}
        <PopoverContent
          onOpenAutoFocus={(e) => {
            e.preventDefault()
          }}
          sideOffset={8}
          collisionPadding={16}
          className="p-3"
        >
          {timerState === "stopped" && stopwatchState === "stopped" ? (
            <>
              <h1 className="text-xl font-medium">Timer</h1>
              <span className="flex items-center gap-3">
                <label className="flex-grow">
                  <span className="text-sm font-medium text-muted-foreground">Hours</span>
                  <Input
                    ref={inputHours}
                    onChange={(e) => {
                      e.target.value = validateNumber(e.target.value, 23)
                    }}
                    maxLength={2}
                    type="number"
                    placeholder="00"
                    className="px-2 py-1 text-center font-mono text-lg"
                  />
                </label>

                <label className="flex-grow">
                  <span className="text-sm font-medium text-muted-foreground">Mins</span>
                  <Input
                    ref={inputMins}
                    onChange={(e) => {
                      e.target.value = validateNumber(e.target.value, 59)
                    }}
                    maxLength={2}
                    type="number"
                    placeholder="00"
                    className="px-2 py-1 text-center font-mono text-lg"
                  />
                </label>
                <label className="flex-grow">
                  <span className="text-sm font-medium text-muted-foreground">Secs</span>
                  <Input
                    ref={inputSecs}
                    onChange={(e) => {
                      e.target.value = validateNumber(e.target.value, 59)
                    }}
                    maxLength={2}
                    type="number"
                    placeholder="00"
                    className="px-2 py-1 text-center font-mono text-lg"
                  />
                </label>
              </span>
              <Button onClick={handleTimerStart} variant="secondary" className="mt-2 w-full">
                <AlarmClockCheck className="mr-2 h-6 w-6" />
                Start timer
              </Button>
              {timerError && <p className="mt-2 text-sm text-red-500">{timerError}</p>}
              <Separator className="my-2" />
              <h1 className="mb-2 text-xl font-medium">Stopwatch</h1>
              <Button className="w-full" onClick={handleStopwatchStart} variant="secondary">
                <Clock5 className="mr-2 h-6 w-6" />
                Start stopwatch
              </Button>
            </>
          ) : stopwatchState === "stopped" ? (
            // Timer is running
            // <TimerRunning currentState={timerState} setCurrentState={setTimerState} />
            <div className="flex flex-col">
              <TimerRunning
                pausedTime={timerPausedTime.current?.getTime()}
                timerState={timerState}
                startTime={timerStartTime.current.getTime()}
                finishTimer={() => {
                  handleTimerEnd()
                  setHasTimerEndAlert(true)
                }}
                endTime={timerEndTime.current.getTime()}
              />
              {timerState === "paused" && (
                <Button variant="outline" onClick={handleTimerUnpause}>
                  Unpause timer
                </Button>
              )}
              {timerState === "running" && (
                <Button variant="outline" onClick={handleTimerPause}>
                  Pause timer
                </Button>
              )}
              <Button onClick={handleTimerEnd} variant="secondary" className="mt-2">
                End timer
              </Button>
            </div>
          ) : (
            // Stopwatch is running
            <div className="flex flex-col">
              <StopwatchRunning currentState={stopwatchState} startTime={stopwatchStartTime.current.getTime()} />
              {stopwatchState === "paused" && (
                <Button variant="outline" onClick={handleStopwatchUnpause}>
                  Unpause stopwatch
                </Button>
              )}
              {stopwatchState === "running" && (
                <Button variant="outline" onClick={handleStopwatchPause}>
                  Pause stopwatch
                </Button>
              )}
              <Button onClick={handleStopwatchEnd} variant="secondary" className="mt-2">
                End stopwatch
              </Button>
            </div>
          )}
        </PopoverContent>
        {/* </AnimateUnmount> */}
      </Popover>
    )
  }
}

================
File: src/components/timer/TimerInput.tsx
================
import { useRef } from "react"

export default function TimerInput({ time, setTime }: { time: number; setTime: (time: number) => void }) {
  // time value is in seconds
  const secondsRef = useRef(null)
  const minutesRef = useRef(null)

  const minutes = Math.floor(time / 60)
  const seconds = time % 60

  const validateSeconds = (time: number) => {
    if (isNaN(time)) return 0
    if (time < 0) return 0
    if (time > 59) return 59
    return time
  }
  const validateTime = (time: number) => {
    if (isNaN(time)) return 0
    if (time < 0) return 0
    return time
  }

  const handleUpdateSeconds = () => {
    if (!secondsRef.current) return
    const newSeconds = validateSeconds(parseInt(secondsRef.current.value))
    setTime(minutes * 60 + newSeconds)
    secondsRef.current.value = newSeconds.toString()
  }
  const handleUpdateMinutes = () => {
    if (!minutesRef.current) return
    const newMinutes = validateTime(parseInt(minutesRef.current.value))
    setTime(newMinutes * 60 + seconds)
    minutesRef.current.value = newMinutes.toString()
  }

  return (
    <div className="flex items-center">
      <div className="relative flex items-center">
        <input
          className="w-28 rounded border border-white/30 bg-popup px-2 py-1 text-white/60 focus:text-white"
          type="number"
          min={0}
          ref={minutesRef}
          onBlur={handleUpdateMinutes}
          defaultValue={minutes ? minutes : 0}
        />
        <span className="pointer-events-none absolute right-2 text-white/50">m</span>
      </div>
      <span className="w-2 text-center font-bold text-white/50">:</span>
      <div className="relative flex items-center">
        <input
          className="w-28 rounded border border-white/30 bg-popup px-2 py-1 text-white/60 focus:text-white"
          type="number"
          max={59}
          min={0}
          ref={secondsRef}
          onBlur={handleUpdateSeconds}
          defaultValue={seconds ? seconds : 0}
        />
        <span className="pointer-events-none absolute right-2 text-white/50">s</span>
      </div>
    </div>
  )
}

================
File: src/components/timer/TimerRunning.tsx
================
import { useEffect, useState } from "react"

export const TimerRunning = ({
  endTime,
  startTime,
  finishTimer,
  pausedTime,
  timerState,
}: {
  startTime: number
  endTime: number
  pausedTime: number
  timerState: "running" | "paused" | "stopped"
  finishTimer: () => void
}) => {
  const [timeLeft, setTimeLeft] = useState<string | null>(null)
  useEffect(() => {
    const updateTimeLeft = () => {
      const currentTime = new Date()
      const diff = endTime - currentTime.getTime()
      // format time left as hours, mins, secs (1:23:45) or (23:45) or (0:45)
      const hours = Math.floor(diff / 3600000)
      const mins = Math.floor((diff % 3600000) / 60000)
      const secs = Math.floor((diff % 60000) / 1000)
      if (diff <= 0) {
        finishTimer()
        return
      }
      if (timerState === "paused") {
        const diff = endTime - pausedTime
        const hours = Math.floor(diff / 3600000)
        const mins = Math.floor((diff % 3600000) / 60000)
        const secs = Math.floor((diff % 60000) / 1000)
        setTimeLeft(`${hours}:${mins < 10 ? `0${mins}` : mins}:${secs < 10 ? `0${secs}` : secs}`)
        return
      }
      setTimeLeft(`${hours}:${mins < 10 ? `0${mins}` : mins}:${secs < 10 ? `0${secs}` : secs}`)
    }
    updateTimeLeft()
    let interval: null | NodeJS.Timeout = null
    if (timerState === "running") {
      interval = setInterval(updateTimeLeft, 1000)
    }
    return () => {
      if (interval) {
        clearInterval(interval)
      }
    }
  }, [timerState])
  const currentTime = new Date().getTime() + 1000
  return (
    <div className={`mb-8 flex min-w-60 flex-col transition-opacity ${timerState === "paused" && "opacity-50"}`}>
      <h2 className="my-4 text-center text-2xl font-bold">{timeLeft}</h2>
      <div className="h-4 w-full rounded-full bg-secondary p-1">
        <div
          style={{
            width: `${Math.max(((currentTime - startTime) / (endTime - startTime)) * 100, 4)}%`,
          }}
          className="h-2 rounded-full bg-primary transition-[width] duration-300"
        ></div>
      </div>
    </div>
  )
}

================
File: src/components/todos/Content.tsx
================
import { useContext, useRef, useState } from "react"
import { TodosContext } from "../../context/general/TodosContext"
import AnimateUnmount from "../lib/AnimateUnmount"
import { Button } from "../ui/button"
import { Plus, TriangleAlert } from "lucide-react"
import { Input } from "../ui/input"

const AnimatedCheckSVG = () => {
  return (
    <svg className="absolute h-7 w-7" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="m2 5 2 2 4 -4"
        stroke="currentColor"
        strokeDasharray={10}
        strokeDashoffset={10}
        strokeWidth="1"
        strokeLinecap="round"
        strokeLinejoin="round"
      >
        <animate attributeName="stroke-dashoffset" begin={".2s"} from="10" to="0" dur=".25s" fill="freeze" />
        <animate attributeName="opacity" begin={".9s"} from="1" to="0" dur=".1s" fill="freeze" />
      </path>
    </svg>
  )
}

export default function Content() {
  const { todos, setTodos } = useContext(TodosContext)
  const [animateDoneTodos, setAnimateDoneTodos] = useState(false)
  const [isAddingTodo, setIsAddingTodo] = useState(false)
  const [error, setError] = useState<null | string>(null)
  const newTodoRef = useRef<HTMLInputElement | null>(null)

  const handleClearFinished = () => {
    setAnimateDoneTodos(true)
    setTimeout(() => {
      setTodos((prev) => {
        return prev.filter((todo) => !todo.completed)
      })
      setAnimateDoneTodos(false)
    }, 1000)
  }

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") handleAddTodo()
    if (e.key === "Escape") {
      setIsAddingTodo(false)
      setError(null)
    }
  }

  const handleAddTodo = () => {
    if (newTodoRef.current) {
      if (!newTodoRef.current.value.trim()) {
        setError("Todo can't be empty")
        return
      }
      setError(null)
      setTodos((prev) => {
        return [
          ...prev,
          {
            text: newTodoRef.current.value,
            completed: false,
            createdAt: Date.now(),
          },
        ]
      })
      newTodoRef.current.value = ""
    }
  }

  return (
    <div className="flex flex-col gap-2">
      <span className="flex min-w-80 items-center justify-between">
        <span className="flex items-center gap-1">
          <Button
            onClick={() => {
              setIsAddingTodo(!isAddingTodo)
              setError(null)
            }}
            size="icon"
            variant="ghost"
          >
            <Plus className={`transition-transform ${isAddingTodo ? "rotate-45" : "rotate-0"}`} />
          </Button>
          <h2 className="text-xl font-medium">Todos</h2>
        </span>

        <button
          disabled={animateDoneTodos}
          onClick={handleClearFinished}
          className="cursor-pointer rounded px-2 py-1 text-white/60 transition-colors duration-75 hover:bg-white/10 hover:text-white"
        >
          {animateDoneTodos ? (
            <>
              <span className="relative flex items-center justify-center">
                <span className="opacity-0">Remove finished</span>
                <AnimatedCheckSVG />
              </span>
            </>
          ) : (
            <span className="animate-[fadeIn_.1s]">Remove finished</span>
          )}
        </button>
      </span>
      <AnimateUnmount
        animationOpen="expandRiseFadeIn"
        closeDuration="300ms"
        animationClose="shrinkDropFadeOut"
        active={isAddingTodo}
      >
        <AddTodo handleKeyDown={handleKeyDown} newTodoRef={newTodoRef} handleAddTodo={handleAddTodo} />
      </AnimateUnmount>
      <AnimateUnmount
        animationOpen="expandRiseFadeIn"
        closeDuration="300ms"
        animationClose="shrinkDropFadeOut"
        active={typeof error === "string"}
      >
        <Error message={error} />
      </AnimateUnmount>
      <div className="flex flex-col gap-2">
        {todos.map((todo) => {
          return (
            <Todo
              animatingOut={animateDoneTodos && todo.completed}
              key={todo.createdAt}
              {...todo}
              setCompleted={(completed) => {
                setTodos((prev) => {
                  return prev.map((t) => {
                    if (t.createdAt === todo.createdAt) {
                      return { ...t, completed }
                    }
                    return t
                  })
                })
              }}
            />
          )
        })}
      </div>
    </div>
  )
}

const CheckmarkSVG = () => {
  return (
    <svg
      className="h-4 w-4 scale-0 transition group-has-[:checked]:scale-100"
      viewBox="0 0 10 10"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="m2 5 2 2 4 -4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
    </svg>
  )
}

const Todo = ({ text, completed, setCompleted, animatingOut }) => {
  return (
    <div
      style={{ animation: animatingOut ? "slideRightShrinkFadeOut .8s forwards" : "" }}
      className="flex items-center justify-between"
    >
      <span className={`line-clamp-1 transition-colors ${completed ? "text-white/50 line-through" : "text-white"}`}>
        {text}
      </span>
      <div className="group relative">
        <input
          className="absolute inset-0 opacity-0"
          type="checkbox"
          checked={completed}
          onChange={(e) => setCompleted(e.target.checked)}
        />
        <div className="group-has-[:checked]::border-white/80 group pointer-events-none flex h-5 w-5 items-center justify-center rounded border border-white/30 text-white transition-colors group-has-[:checked]:bg-highlight">
          <CheckmarkSVG />
        </div>
      </div>
    </div>
  )
}

const Error = ({ message }) => {
  return (
    <div className="flex items-center gap-2 rounded border border-red-600 bg-red-800 p-1 px-2 py-0.5 text-red-200">
      <TriangleAlert className="h-5 w-5" />
      {message}
    </div>
  )
}

const AddTodo = ({ handleKeyDown, newTodoRef, handleAddTodo }) => {
  return (
    <span className="flex items-center gap-1">
      <Input onKeyDown={handleKeyDown} ref={newTodoRef} className="h-auto py-1" />
      <Button onClick={handleAddTodo} size="icon" variant="ghost" className="h-7">
        <Plus />
      </Button>
    </span>
  )
}

================
File: src/components/todos/todos.css
================
.customTransitionRule {
  transition: d 150ms ease-in-out;
}

================
File: src/components/todos/Todos.tsx
================
import { useContext, useState } from "react"
import "./todos.css"
import Content from "./Content"
import { OpenTodosContext, ShowTodosContext } from "../../context/general/TodosContext"
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover"
import { ListChecksIcon } from "lucide-react"

// const TodoIconSVG = ({ isOpen }: { isOpen: boolean }) => {
//   return (
//     <svg
//       className="h-12 w-12 transition-colors duration-75 group-hover:text-foreground"
//       stroke="currentColor"
//       fill="none"
//       strokeWidth="2"
//       viewBox="0 0 24 24"
//       strokeLinejoin="round"
//       strokeLinecap="round"
//       height="200px"
//       width="200px"
//       xmlns="http://www.w3.org/2000/svg"
//     >
//       <rect
//         className={`transition-opacity ${isOpen ? "duration-75" : "delay-150 duration-200"}`}
//         opacity={isOpen ? "0" : "1"}
//         x="3"
//         y="5"
//         width="6"
//         height="6"
//         rx="1"
//       ></rect>
//       <path
//         className="customTransitionRule"
//         d={isOpen ? "m4 4 16 16 -8 -8 8 -8 -16 16" : "m3 17 2 2 0  0 0  0 4 -4"}
//       ></path>
//       <path
//         className={`transition-opacity ${isOpen ? "duration-75" : "delay-150 duration-200"}`}
//         opacity={isOpen ? "0" : "1"}
//         d="M13 6h8"
//       ></path>
//       <path
//         className={`transition-opacity ${isOpen ? "duration-75" : "delay-150 duration-200"}`}
//         opacity={isOpen ? "0" : "1"}
//         d="M13 12h8"
//       ></path>
//       <path
//         className={`transition-opacity ${isOpen ? "duration-75" : "delay-150 duration-200"}`}
//         opacity={isOpen ? "0" : "1"}
//         d="M13 18h8"
//       ></path>
//     </svg>
//   )
// }

export default function Todos() {
  const { showTodos } = useContext(ShowTodosContext)
  if (!showTodos) return <></>
  const { openTodos } = useContext(OpenTodosContext)
  const [isOpen, setIsOpen] = useState(openTodos)

  return (
    <Popover onOpenChange={setIsOpen}>
      <PopoverTrigger
        className={`${isOpen ? "text-foreground" : "text-muted-foreground hover:text-foreground"} group cursor-pointer rounded-lg p-2 transition-colors`}
      >
        <ListChecksIcon
          className={`h-12 w-12 transition-transform ${isOpen ? "translate-y-0 scale-100" : "translate-y-3 scale-[60%] group-hover:translate-y-1 group-hover:scale-[70%]"}`}
        />
      </PopoverTrigger>
      <PopoverContent
        onOpenAutoFocus={(e) => {
          e.preventDefault()
        }}
        sideOffset={8}
        collisionPadding={16}
        className="w-auto p-3"
      >
        <Content />
      </PopoverContent>
    </Popover>
  )
}

================
File: src/components/ui/accordion.tsx
================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/command.tsx
================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: src/components/ui/dialog.tsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/form.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/popover.tsx
================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: src/components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/separator.tsx
================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: src/components/ui/switch.tsx
================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: src/components/ui/tooltip.tsx
================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/components/weather/content/Content.tsx
================
import { lazy, Suspense, useState } from "react"
import Loading from "../../lib/Loading"
import * as Tabs from "@radix-ui/react-tabs"
import ViewSelector from "./ViewSelector"
import { TriangleAlert } from "lucide-react"
const WeatherChart = lazy(() => import("./WeatherChart"))

// import WeatherChart from "./WeatherChart"

interface FullData {
  temperature: number[]
  apparentTemperature: number[]
  precipitationProbability: number[]
  cloudCover: number[]
  visibility: number[]
  windSpeed: number[]
  uvIndex: number[]
  time: string[]
}

const getColorForTemperature = (temp) => {
  if (temp < 20) return "#d6eeff"
  if (temp < 30) return "#99d5ff"
  if (temp < 40) return "#63beff"
  if (temp < 50) return "#0194FD"
  if (temp < 60) return "#73FEF0"
  if (temp < 70) return "#DFF96A"
  if (temp < 80) return "#FDE764"
  if (temp < 90) return "#FC9243"
  return "#FE1623"
}
const getColorForUV = (uv) => {
  if (uv < 3) return "#34d100"
  if (uv < 6) return "#c0d100"
  if (uv < 8) return "#e86c00"
  if (uv < 11) return "#d18100"
  return "#d10000"
}

export default function Content({ currentState }: { currentState: string | FullData }) {
  const [currentView, setCurrentView] = useState("temperature")
  const [isFlattening, setIsFlattening] = useState(false)
  if (typeof currentState === "string") {
    if (currentState === "loading") {
      return (
        <div className="flex h-[400px] w-[402px] items-center justify-center">
          <Loading className="h-24 w-24 text-muted-foreground" />
        </div>
      )
    }
    return (
      <span className="flex w-max items-center gap-2 rounded border border-red-500 bg-red-600/60 p-2 text-red-200">
        <TriangleAlert />
        {currentState}
      </span>
    )
  }
  return (
    <div className="relative min-w-52">
      <ViewSelector
        currentView={currentView}
        setCurrentView={(e) => {
          setCurrentView(e)
          setIsFlattening(true)
          setTimeout(() => {
            setIsFlattening(false)
          }, 650)
        }}
      />
      <div className="relative mt-2">
        <Tabs.Root value={currentView}>
          <Tabs.Content className="weatherContentTab" value="temperature">
            <Suspense fallback={<div className="h-[348px] w-[402px]"></div>}>
              <WeatherChart
                unit={"°"}
                colorFunction={getColorForTemperature}
                isFlattening={isFlattening}
                times={currentState.time}
                data={currentState.temperature}
              />
            </Suspense>
          </Tabs.Content>
          <Tabs.Content className="weatherContentTab" value="feelsLike">
            <WeatherChart
              unit={"°"}
              colorFunction={getColorForTemperature}
              isFlattening={isFlattening}
              times={currentState.time}
              data={currentState.apparentTemperature}
            />
          </Tabs.Content>
          <Tabs.Content className="weatherContentTab" value="precipProb">
            <WeatherChart
              unit={"%"}
              minColor={"#12167F"}
              maxColor={"#1733A8"}
              isFlattening={isFlattening}
              times={currentState.time}
              data={currentState.precipitationProbability}
            />
          </Tabs.Content>
          <Tabs.Content className="weatherContentTab" value="cloudCover">
            <WeatherChart
              unit={"%"}
              minColor={"#D1DFF6"}
              maxColor={"#92B6F0"}
              isFlattening={isFlattening}
              times={currentState.time}
              data={currentState.cloudCover}
            />
          </Tabs.Content>
          <Tabs.Content className="weatherContentTab" value="visibility">
            <WeatherChart
              unit={"mi"}
              roundLess
              minColor={"#D1DFF6"}
              maxColor={"#92B6F0"}
              isFlattening={isFlattening}
              times={currentState.time}
              data={currentState.visibility}
            />
          </Tabs.Content>
          <Tabs.Content className="weatherContentTab" value="uv">
            <WeatherChart
              unit={""}
              colorFunction={getColorForUV}
              isFlattening={isFlattening}
              times={currentState.time}
              data={currentState.uvIndex}
            />
          </Tabs.Content>
        </Tabs.Root>
      </div>
    </div>
  )
}

================
File: src/components/weather/content/CustomParts.tsx
================
import { ClockSVG } from "./Icons"

export const CustomLabel = ({ viewBox }) => {
  const { x, y } = viewBox
  return (
    <g transform={`translate(${x},${y})`}>
      <foreignObject x="-12" y="0" width="24" height="24">
        <ClockSVG />
      </foreignObject>
    </g>
  )
}

export const CustomTick = ({ x, y, payload }) => {
  const timeParts = payload.value.split(" ")
  const time = timeParts[0]
  const amPm = timeParts[1]

  if (x < 30) {
    x = 30
  }
  if (x > 370) {
    x = 370
  }

  return (
    <g transform={`translate(${x},${y})`}>
      <text x={0} y={0} dy={16} textAnchor="middle" className="font-medium" fill="#666">
        {time}
        <tspan className="font-light" fontSize="11">{` ${amPm}`}</tspan>
      </text>
    </g>
  )
}

export const CustomTooltip = () => null

================
File: src/components/weather/content/DaySelector.tsx
================
export const DaySelector = ({ currentDay, setCurrentDay, i, time }) => {
  return (
    <button
      onClick={() => setCurrentDay(i)}
      className={`rounded p-1 ${currentDay === i ? "bg-accent font-medium text-foreground" : "text-muted-foreground hover:bg-accent/50"}`}
    >
      {typeof time === "string" ? (
        time
      ) : (
        <div className="flex flex-col items-center">
          {time.month}
          <div className="-mt-1.5 text-xl">{time.day}</div>
        </div>
      )}
    </button>
  )
}

export default DaySelector

================
File: src/components/weather/content/Icons.tsx
================
// ArrowUpSVG.js
export const ArrowUpSVG = () => {
  return (
    <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M7.14645 2.14645C7.34171 1.95118 7.65829 1.95118 7.85355 2.14645L11.8536 6.14645C12.0488 6.34171 12.0488 6.65829 11.8536 6.85355C11.6583 7.04882 11.3417 7.04882 11.1464 6.85355L8 3.70711V12.5C8 12.7761 7.77614 13 7.5 13C7.22386 13 7 12.7761 7 12.5V3.70711L3.85355 6.85355C3.65829 7.04882 3.34171 7.04882 3.14645 6.85355C2.95118 6.65829 2.95118 6.34171 3.14645 6.14645L7.14645 2.14645Z"
        fill="currentColor"
        fillRule="evenodd"
        clipRule="evenodd"
      ></path>
    </svg>
  )
}

export const ClockSVG = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="12" cy="12" r="10" stroke="#dddddd" strokeWidth="2" />
    <path d="M12 6V12L15 15" stroke="#dddddd" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
  </svg>
)

================
File: src/components/weather/content/Loader.tsx
================
import Loading from "../../lib/Loading"

export default function Loader() {
  return (
    <div className="flex h-[400px] w-[402px] items-center justify-center">
      <Loading className="h-24 w-24 text-muted-foreground" />
    </div>
  )
}

================
File: src/components/weather/content/ViewSelector.tsx
================
import * as Select from "@radix-ui/react-select"

const ChevronDown = () => {
  return (
    <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z"
        fill="currentColor"
        fillRule="evenodd"
        clipRule="evenodd"
      ></path>
    </svg>
  )
}

const ThermometerSVG = () => {
  return (
    <svg
      stroke="currentColor"
      fill="currentColor"
      viewBox="0 0 256 512"
      className="h-4 w-4 group-hover:fill-yellow-500 group-data-[value='temperature']:h-7 group-data-[value='temperature']:w-7 group-data-[value='temperature']:fill-yellow-500"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M224 96c0-53.019-42.981-96-96-96S32 42.981 32 96v203.347C12.225 321.756.166 351.136.002 383.333c-.359 70.303 56.787 128.176 127.089 128.664.299.002.61.003.909.003 70.698 0 128-57.304 128-128 0-32.459-12.088-62.09-32-84.653V96zm-96 368l-.576-.002c-43.86-.304-79.647-36.544-79.423-80.42.173-33.98 19.266-51.652 31.999-66.08V96c0-26.467 21.533-48 48-48s48 21.533 48 48v221.498c12.63 14.312 32 32.164 32 66.502 0 44.112-35.888 80-80 80zm64-80c0 35.346-28.654 64-64 64s-64-28.654-64-64c0-23.685 12.876-44.349 32-55.417V96c0-17.673 14.327-32 32-32s32 14.327 32 32v232.583c19.124 11.068 32 31.732 32 55.417z"></path>
    </svg>
  )
}

const FeelsLikeSVG = () => {
  return (
    <svg
      stroke="currentColor"
      fill="currentColor"
      viewBox="0 0 256 512"
      className="h-4 w-4 group-hover:fill-green-500 group-data-[value='feelsLike']:h-7 group-data-[value='feelsLike']:w-7 group-data-[value='feelsLike']:fill-green-500"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M192 384c0 35.346-28.654 64-64 64s-64-28.654-64-64c0-35.346 28.654-64 64-64s64 28.654 64 64zm32-84.653c19.912 22.563 32 52.194 32 84.653 0 70.696-57.303 128-128 128-.299 0-.609-.001-.909-.003C56.789 511.509-.357 453.636.002 383.333.166 351.135 12.225 321.755 32 299.347V96c0-53.019 42.981-96 96-96s96 42.981 96 96v203.347zM208 384c0-34.339-19.37-52.19-32-66.502V96c0-26.467-21.533-48-48-48S80 69.533 80 96v221.498c-12.732 14.428-31.825 32.1-31.999 66.08-.224 43.876 35.563 80.116 79.423 80.42L128 464c44.112 0 80-35.888 80-80z"></path>
    </svg>
  )
}
const DropSVG = () => {
  return (
    <svg
      className="w-4 group-hover:fill-blue-600 group-data-[value='precipProb']:w-7 group-data-[value='precipProb']:fill-blue-600"
      stroke="currentColor"
      fill="currentColor"
      viewBox="0 0 512 512"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M406.043 316c24.11 96.443-50.59 180-150 180s-174.405-82.38-150-180c15-60 90-150 150-300 60 150 135 240 150 300z"></path>
    </svg>
  )
}

const CloudSVG = () => {
  return (
    <svg
      className="w-4 group-hover:fill-[#697180] group-data-[value='cloudCover']:w-7 group-data-[value='cloudCover']:fill-[#697180]"
      stroke="currentColor"
      fill="currentColor"
      viewBox="0 0 512 512"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M396 432H136c-36.44 0-70.36-12.57-95.51-35.41C14.38 372.88 0 340 0 304c0-36.58 13.39-68.12 38.72-91.22 19.93-18.19 47.12-30.56 77.38-35.37a156.42 156.42 0 0 1 45.22-63.61C187.76 91.69 220.5 80 256 80a153.57 153.57 0 0 1 107.14 42.9c27.06 26.06 44.59 61.28 51.11 102.46C463.56 232.66 512 266.15 512 328c0 33.39-12.24 60.78-35.41 79.23C456.23 423.43 428.37 432 396 432z"></path>
    </svg>
  )
}

const EyeSVG = () => {
  return (
    <svg
      className="w-4 group-hover:fill-[#5c9aff] group-data-[value='visibility']:w-7 group-data-[value='visibility']:fill-[#5c9aff]"
      stroke="currentColor"
      fill="currentColor"
      viewBox="0 0 512 512"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle cx="256" cy="256" r="64"></circle>
      <path d="M394.82 141.18C351.1 111.2 304.31 96 255.76 96c-43.69 0-86.28 13-126.59 38.48C88.52 160.23 48.67 207 16 256c26.42 44 62.56 89.24 100.2 115.18C159.38 400.92 206.33 416 255.76 416c49 0 95.85-15.07 139.3-44.79C433.31 345 469.71 299.82 496 256c-26.38-43.43-62.9-88.56-101.18-114.82zM256 352a96 96 0 1 1 96-96 96.11 96.11 0 0 1-96 96z"></path>
    </svg>
  )
}

const CircleSVG = () => {
  return (
    <svg
      className="w-4 group-hover:fill-amber-500 group-data-[value='uv']:w-7 group-data-[value='uv']:fill-amber-500"
      stroke="currentColor"
      fill="currentColor"
      viewBox="0 0 512 512"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle cx="256" cy="256" r="256"></circle>
    </svg>
  )
}

const className = {
  item: "flex group items-center gap-2 py-1 hover:bg-accent px-2 outline-none text-base text-muted-foreground hover:text-foreground rounded cursor-pointer",
}

export default function ViewSelector({
  currentView,
  setCurrentView,
}: {
  currentView: string
  setCurrentView: (view: string) => void
}) {
  return (
    <Select.Root value={currentView} onValueChange={setCurrentView}>
      <Select.Trigger
        data-value={currentView}
        className="group flex items-center justify-center gap-2 rounded-lg py-2 pl-1 pr-4 text-2xl font-medium leading-none outline-none"
      >
        <Select.Value />
        <Select.Icon>
          <ChevronDown />
        </Select.Icon>
      </Select.Trigger>
      <Select.Portal>
        <Select.Content position="popper" className="rounded-lg border bg-card p-1.5">
          <Select.Viewport>
            <Select.Item className={className.item} value="temperature">
              <Select.ItemText>
                <span className="flex items-center gap-2">
                  <ThermometerSVG />
                  Temperature
                </span>
              </Select.ItemText>
            </Select.Item>
            <Select.Item className={className.item} value="feelsLike">
              <Select.ItemText>
                <span className="flex items-center gap-2">
                  <FeelsLikeSVG />
                  Feels like
                </span>
              </Select.ItemText>
            </Select.Item>
            <Select.Item className={className.item} value="precipProb">
              <Select.ItemText>
                <span className="flex items-center gap-2">
                  <DropSVG />
                  Precipitation %
                </span>
              </Select.ItemText>
            </Select.Item>
            <Select.Item className={className.item} value="cloudCover">
              <Select.ItemText>
                <span className="flex items-center gap-2">
                  <CloudSVG />
                  Cloud cover
                </span>
              </Select.ItemText>
            </Select.Item>
            <Select.Item className={className.item} value="visibility">
              <Select.ItemText>
                <span className="flex items-center gap-2">
                  <EyeSVG />
                  Visibility
                </span>
              </Select.ItemText>
            </Select.Item>
            <Select.Item className={className.item} value="uv">
              <Select.ItemText>
                <span className="flex items-center gap-2">
                  <CircleSVG />
                  UV Index
                </span>
              </Select.ItemText>
            </Select.Item>
          </Select.Viewport>
        </Select.Content>
      </Select.Portal>
    </Select.Root>
  )
}

================
File: src/components/weather/content/weather.css
================
.weatherContentTab[data-state="active"] {
  animation: expandFadeIn 0.5s 0.5s ease-in-out backwards;
}
.weatherContentTab[data-state="inactive"] {
  top: 0;
  right: 0;
  position: absolute;
  width: 100%;
  animation: shrinkFadeOut 0.5s ease-in-out;
}

================
File: src/components/weather/content/WeatherChart.tsx
================
// WeatherChart.js
import { useEffect, useMemo, useState } from "react"
import { AreaChart, Area, XAxis, Tooltip, YAxis, ReferenceLine } from "recharts"
import { ArrowUpSVG } from "./Icons"
import { CustomLabel, CustomTick, CustomTooltip } from "./CustomParts"
import DaySelector from "./DaySelector"

function getNextSevenDays() {
  const days = ["Today"]
  const today = new Date()
  const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]

  for (let i = 1; i < 7; i++) {
    const nextDay = new Date(today)
    nextDay.setDate(today.getDate() + i)
    const dayObj = {
      month: monthNames[nextDay.getMonth()],
      day: nextDay.getDate(),
    }
    // @ts-ignore
    days.push(dayObj)
  }

  return days
}

const days = getNextSevenDays()

export default function WeatherChart({
  data,
  times,
  colorFunction,
  isFlattening,
  unit,
  roundLess = false,
  minColor,
  maxColor,
}: {
  data: number[]
  times: string[]
  colorFunction?: (temp: number) => string
  isFlattening: boolean
  unit: string
  roundLess?: boolean
  minColor?: string
  maxColor?: string
}) {
  const [currentDay, setCurrentDay] = useState(0) // 0 is today
  const [hoveredIndex, setHoveredIndex] = useState(null)

  const chartData = useMemo(
    () =>
      data.map((temp, i) => {
        return {
          name: times[i],
          temp: temp,
        }
      }),
    [data, times],
  )

  const roundFunction = (num) => {
    if (!roundLess) {
      return Math.round(num)
    } else {
      return Math.round(num * 10) / 10
    }
  }

  const currentChartData = useMemo(
    () => chartData.slice(currentDay * 24, currentDay * 24 + 24),
    [currentDay, chartData],
  )

  const minTemp = useMemo(() => Math.min(...currentChartData.map((d) => d.temp)), [currentChartData])
  const maxTemp = useMemo(() => Math.max(...currentChartData.map((d) => d.temp)), [currentChartData])

  const domainMin = minTemp - 5 > 0 ? minTemp - 5 : 0

  if (colorFunction) {
    minColor = useMemo(() => colorFunction(minTemp), [minTemp, colorFunction])
    maxColor = useMemo(() => colorFunction(maxTemp), [maxTemp, colorFunction])
  }

  const dataAllZeroes = useMemo(
    () =>
      currentChartData.map((d) => {
        return {
          name: d.name,
          temp: 0,
        }
      }),
    [currentChartData],
  )

  const getCurrentTimeIndex = () => {
    const now = new Date()
    const currentHour = now.getHours()
    return currentHour
  }

  return (
    <div>
      <div className="mb-2 grid grid-cols-7 gap-1 rounded-lg border p-1">
        {days.map((day, i) => (
          <DaySelector key={`ds_${i}`} currentDay={currentDay} setCurrentDay={setCurrentDay} i={i} time={day} />
        ))}
      </div>
      <div className="mb-2 flex items-center justify-between rounded-lg border p-2">
        <span className="relative text-3xl font-semibold leading-none">
          {hoveredIndex !== null ? (
            <>
              {roundFunction(hoveredIndex.temp)}
              {unit}
              <span className="absolute left-0 top-full -mt-1 w-24 text-sm font-medium text-muted-foreground">
                {hoveredIndex.name}
              </span>
            </>
          ) : (
            <>
              {roundFunction(currentChartData[getCurrentTimeIndex()].temp)}
              {unit}
            </>
          )}
        </span>
        <div className="text-muted-foreground">
          <span className="flex items-center gap-1">
            <ArrowUpSVG /> {roundFunction(maxTemp)}
            {unit}
          </span>
          <span className="flex items-center gap-1">
            <div className="rotate-180">
              <ArrowUpSVG />
            </div>
            {roundFunction(minTemp)}
            {unit}
          </span>
        </div>
      </div>
      <div className="rounded-lg border">
        <AreaChart
          margin={{
            top: 10,
            right: 0,
            left: 0,
            bottom: 5,
          }}
          onMouseMove={(e) => {
            if (e && e.activePayload) {
              setHoveredIndex(e.activePayload[0].payload)
            }
          }}
          onMouseLeave={() => setHoveredIndex(null)}
          width={400}
          height={200}
          data={isFlattening ? dataAllZeroes : currentChartData}
        >
          <defs>
            <linearGradient id="tempGradient" x1="0" y1="0" x2="0" y2="1">
              <stop offset="0%" stopColor={maxColor} />
              <stop offset="100%" stopColor={minColor} />
            </linearGradient>
          </defs>
          {/* @ts-ignore */}
          <XAxis tick={<CustomTick />} dataKey={"name"} interval={6} />
          <YAxis hide domain={[domainMin, maxTemp + 5]} />
          <ReferenceLine
            x={currentChartData[getCurrentTimeIndex()].name}
            strokeWidth={2}
            strokeLinecap="round"
            stroke="#dddddd"
            strokeDasharray="125"
            // @ts-ignore
            label={<CustomLabel />}
          />
          <Tooltip content={<CustomTooltip />} />
          <Area
            animationDuration={350}
            type="monotone"
            dataKey="temp"
            stroke="#ffffff90"
            strokeWidth={3}
            fill="url(#tempGradient)"
          />
        </AreaChart>
      </div>
    </div>
  )
}

================
File: src/components/weather/convertWMOCode.ts
================
export default function convertWMOCode(code: number) {
  switch (code) {
    case 0:
      return "Clear"
    case 1:
      return "Mostly clear"
    case 2:
      return "Partly cloudy"
    case 3:
      return "Cloudy"
    case 45:
      return "Foggy"
    case 48:
      return "Rime fog"
    case 51:
      return "Light drizzle"
    case 53:
      return "Drizzle"
    case 55:
      return "Dense drizzle"
    case 56:
      return "Light freezing drizzle"
    case 57:
      return "Freezing drizzle"
    case 61:
      return "Light rain"
    case 63:
      return "Rain"
    case 65:
      return "Heavy rain"
    case 66:
      return "Light freezing rain"
    case 67:
      return "Freezing rain"
    case 71:
      return "Light snow"
    case 73:
      return "Snow"
    case 75:
      return "Heavy snow"
    case 77:
      return "Snow grains"
    case 80:
      return "Light showers"
    case 81:
      return "Rain showers"
    case 82:
      return "Heavy showers"
    case 85:
      return "Light snow showers"
    case 86:
      return "Heavy snow showers"
    case 95:
      return "Thunder"
    case 96:
      return "Heavy thunder"
    case 99:
      return "Thunder"
    default:
      return null
  }
}

================
File: src/components/weather/Weather.tsx
================
import { useContext, useEffect, useState } from "react"
import {
  WeatherEnabledContext,
  WeatherIsCelsiusContext,
  WeatherLocationContext,
} from "../../context/weather/WeatherProvider"
import AnimateUnmount from "../lib/AnimateUnmount"
import Content from "./content/Content"
import Loading from "../lib/Loading"
import "./content/weather.css"
import convertWMOCode from "./convertWMOCode"
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover"
import { CloudCogIcon, SunIcon } from "lucide-react"

interface PreviewWeatherData {
  temperature: number
  descriptor: string
  iconCode: string
}

interface FullData {
  temperature: number[]
  apparentTemperature: number[]
  precipitationProbability: number[]
  cloudCover: number[]
  visibility: number[]
  windSpeed: number[]
  uvIndex: number[]
  time: string[]
}

const SunSVG = () => {
  return (
    <svg
      className="transition-colors group-hover:text-white"
      width="30"
      height="30"
      viewBox="0 0 15 15"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z"
        fill="currentColor"
        fillRule="evenodd"
        clipRule="evenodd"
      ></path>
    </svg>
  )
}

export default function Weather() {
  const { weatherEnabled } = useContext(WeatherEnabledContext)
  if (!weatherEnabled) return <></>
  const { weatherIsCelsius } = useContext(WeatherIsCelsiusContext)
  const { weatherLocation, setWeatherLocation } = useContext(WeatherLocationContext)
  const [isOpen, setIsOpen] = useState(false)
  const [fullState, setFullState] = useState<"loading" | "inactive" | string | FullData>("inactive")
  const [previewState, setPreviewState] = useState<"loading" | "error" | PreviewWeatherData>("loading")

  useEffect(() => {
    if (!weatherLocation || weatherLocation.name === "none") {
      setPreviewState("error")
      setFullState("You must set your location in settings")
    } else {
      fetchPreviewData().then((data) => {
        if (!data) {
          setPreviewState("error")
          setFullState("Unable to fetch weather data")
        } else {
          setPreviewState(data)
        }
      })
    }
  }, [])

  useEffect(() => {
    if (!weatherLocation || weatherLocation.name === "none") {
      setPreviewState("error")
      setFullState("You must set your location in settings")
    } else {
      setFullState("inactive")
      fetchPreviewData().then((data) => {
        if (!data) {
          setPreviewState("error")
          setFullState("Unable to fetch weather data")
        } else {
          setPreviewState(data)
        }
      })
    }
  }, [weatherLocation.lat, weatherLocation.lon, weatherIsCelsius])

  const handleToggle = (e: boolean) => {
    setIsOpen(e)
    if (fullState === "inactive") {
      setFullState("loading")
      fetchFullData().then((data) => {
        if (!data) {
          setPreviewState("error")
          setFullState("Unable to fetch weather data")
        }
        setFullState(data)
      })
    }
  }

  const fetchPreviewData = async () => {
    if (weatherLocation.name === "auto") {
      if ("navigator" in window) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            setWeatherLocation({
              name: "auto",
              lat: position.coords.latitude,
              lon: position.coords.longitude,
            })
          },
          () => {
            console.log("Error updating weather location, using saved location")
          },
        )
      }
    }
    const res = await fetch(
      `https://api.open-meteo.com/v1/forecast?latitude=${weatherLocation.lat}&longitude=${weatherLocation.lon}&current=temperature_2m,apparent_temperature,weather_code&temperature_unit=${weatherIsCelsius ? "celsius" : "fahrenheit"}&timezone=auto`,
    )
    if (!res.ok) {
      console.log("Error fetching weather data")
      return null
    }
    const data = await res.json()
    switch (data.current.weather_code) {
      case 0:
        data.current.weather_code = "Clear"
        break
    }
    return {
      temperature: Math.round(data.current.temperature_2m),
      descriptor: convertWMOCode(data.current.weather_code),
      iconCode: data.current.weather_code,
    }
  }

  const fetchFullData = async () => {
    const res = await fetch(
      `https://api.open-meteo.com/v1/forecast?latitude=${weatherLocation.lat}&longitude=${weatherLocation.lon}&hourly=temperature_2m,apparent_temperature,precipitation,cloud_cover,visibility,wind_speed_10m,uv_index&temperature_unit=${weatherIsCelsius ? "celsius" : "fahrenheit"}&timezone=auto&wind_speed_unit=mph&precipitation_unit=inch`,
    )
    if (!res.ok) {
      console.log("Error fetching weather data")
      return null
    }
    const data = await res.json()
    const formattedData = {
      temperature: data.hourly.temperature_2m,
      apparentTemperature: data.hourly.apparent_temperature,
      precipitationProbability: data.hourly.precipitation,
      cloudCover: data.hourly.cloud_cover,
      visibility: data.hourly.visibility.map((visibility: number) => visibility / 5280),
      windSpeed: data.hourly.wind_speed_10m,
      uvIndex: data.hourly.uv_index,
      time: data.hourly.time.map((time: string) =>
        new Date(time).toLocaleTimeString("en-US", { hour: "numeric", minute: "numeric" }),
      ),
    }
    return formattedData
  }

  return (
    <Popover onOpenChange={handleToggle}>
      <div className="relative">
        <PopoverTrigger
          className={`group ${isOpen ? "text-foreground" : "text-muted-foreground hover:text-foreground"} group cursor-pointer rounded-lg p-2 transition-colors`}
        >
          {previewState === "loading" && <Loading className="h-12 w-12 scale-[60%]" />}
          {previewState === "error" && (
            <CloudCogIcon
              className={`h-12 w-12 transition-transform ${isOpen ? "translate-y-0 scale-100" : "translate-y-3 scale-[60%] group-hover:translate-y-1 group-hover:scale-[70%]"}`}
            />
          )}
          {typeof previewState === "object" && (
            <DataPreview
              isOpen={isOpen}
              temp={previewState.temperature}
              code={previewState.iconCode}
              description={previewState.descriptor}
            />
          )}
        </PopoverTrigger>
        {/* content */}

        <PopoverContent
          onOpenAutoFocus={(e) => {
            e.preventDefault()
          }}
          sideOffset={8}
          collisionPadding={16}
          className="w-auto p-3"
        >
          <Content currentState={fullState} />
        </PopoverContent>
      </div>
    </Popover>
  )
}

const DataPreview = ({
  temp,
  code,
  description,
  isOpen,
}: {
  temp: number
  code: string
  description: string
  isOpen: boolean
}) => {
  return (
    <div
      className={`flex animate-[fadeIn_.5s] items-center gap-2 transition-transform ${isOpen ? "translate-y-0 scale-100" : "translate-y-3 scale-[60%] group-hover:translate-y-1 group-hover:scale-[70%]"}`}
    >
      <SunIcon className={`h-12 w-12`} />

      <h1 className={`absolute left-14 text-3xl transition-opacity ${isOpen ? "opacity-0" : "opacity-100"}`}>
        {temp}&deg;
      </h1>
    </div>
  )
}

================
File: src/ConnectionWrapper.tsx
================
import React, { useState, useEffect, ReactNode } from "react"

interface ConnectionWrapperProps {
  children: ReactNode
  fallback: ReactNode
}

const ConnectionWrapper: React.FC<ConnectionWrapperProps> = ({ children, fallback }) => {
  const [isOnline, setIsOnline] = useState<boolean>(navigator.onLine)

  useEffect(() => {
    const handleOnline = () => setIsOnline(true)
    const handleOffline = () => setIsOnline(false)

    window.addEventListener("online", handleOnline)
    window.addEventListener("offline", handleOffline)

    return () => {
      window.removeEventListener("online", handleOnline)
      window.removeEventListener("offline", handleOffline)
    }
  }, [])

  if (!isOnline) {
    return <>{fallback}</>
  }

  return <>{children}</>
}

export default ConnectionWrapper

================
File: src/context/appearance/Appearance.tsx
================
import { createContext } from "react"
import useChromeStorage from "../../hooks/useChromeStorage"
import { BackgroundSettingsProvider } from "./BackgroundSettings"

export const AutomaticDarkModeContext = createContext(null)
const AutomaticDarkModeDefault = false
const AutomaticDarkModeProvider = ({ children }) => {
  const [automaticDarkMode, setAutomaticDarkMode] = useChromeStorage("automaticDarkMode", AutomaticDarkModeDefault)

  return (
    <AutomaticDarkModeContext.Provider value={{ automaticDarkMode, setAutomaticDarkMode }}>
      {children}
    </AutomaticDarkModeContext.Provider>
  )
}

export const BackgroundMode = createContext(null)
const BackgroundModeDefault = "aura" // can be "solid", "gradient", "unsplash", "aura",
export const BackgroundModeProvider = ({ children }) => {
  const [backgroundMode, setBackgroundMode] = useChromeStorage("backgroundMode", BackgroundModeDefault)
  return <BackgroundMode.Provider value={{ backgroundMode, setBackgroundMode }}>{children}</BackgroundMode.Provider>
}

export const DarkModeContext = createContext(null)
const DarkModeDefault = true
const DarkModeProvider = ({ children }) => {
  const [darkMode, setDarkMode] = useChromeStorage("darkMode", DarkModeDefault)
  return <DarkModeContext.Provider value={{ darkMode, setDarkMode }}>{children}</DarkModeContext.Provider>
}

export const AppearanceProvider = ({ children }) => {
  return (
    <AutomaticDarkModeProvider>
      <BackgroundModeProvider>
        <BackgroundSettingsProvider>
          <DarkModeProvider>{children}</DarkModeProvider>
        </BackgroundSettingsProvider>
      </BackgroundModeProvider>
    </AutomaticDarkModeProvider>
  )
}

================
File: src/context/appearance/BackgroundSettings.tsx
================
import useChromeStorage from "@/hooks/useChromeStorage"
import { createContext } from "react"

export const SolidBackgroundColorContext = createContext(null)
const DEFAULT_solidBackgroundColor = 0
const SolidBackgroundColorProvider = ({ children }) => {
  const [solidBackgroundColor, setSolidBackgroundColor] = useChromeStorage(
    "solidBackgroundColor",
    DEFAULT_solidBackgroundColor,
  )
  return (
    <SolidBackgroundColorContext.Provider value={{ solidBackgroundColor, setSolidBackgroundColor }}>
      {children}
    </SolidBackgroundColorContext.Provider>
  )
}

export const FollowMouseContext = createContext(null)
const DEFAULT_followMouse = true
const FollowMouseProvider = ({ children }) => {
  const [followMouse, setFollowMouse] = useChromeStorage("followMouse", DEFAULT_followMouse)
  return <FollowMouseContext.Provider value={{ followMouse, setFollowMouse }}>{children}</FollowMouseContext.Provider>
}

export const AuraColorContext = createContext(null)
const DEFAULT_auraColor = 0 // can be 0 1 2 3 4 5
const AuraColorProvider = ({ children }) => {
  const [auraColor, setAuraColor] = useChromeStorage("auraColor", DEFAULT_auraColor)
  return <AuraColorContext.Provider value={{ auraColor, setAuraColor }}>{children}</AuraColorContext.Provider>
}

export const BackgroundSettingsProvider = ({ children }) => {
  return (
    <FollowMouseProvider>
      <SolidBackgroundColorProvider>
        <AuraColorProvider>{children}</AuraColorProvider>
      </SolidBackgroundColorProvider>
    </FollowMouseProvider>
  )
}

================
File: src/context/appearance/Layout.tsx
================
import { createContext } from "react"
import useChromeStorage from "../../hooks/useChromeStorage"

type LayoutContextType = {
  layout: number
  setLayout: (layout: number) => void
}

const DEFAULT_layout = 0
export const LayoutContext = createContext<LayoutContextType | null>(null)

export const LayoutProvider = ({ children }) => {
  const [layout, setLayout] = useChromeStorage("layout", DEFAULT_layout)
  return <LayoutContext.Provider value={{ layout, setLayout }}>{children}</LayoutContext.Provider>
}

================
File: src/context/general/ClockContext.tsx
================
import { createContext } from "react"
import useChromeStorage from "../../hooks/useChromeStorage"

export const Clock24HourContext = createContext(null)

const defaultUse24Hour = false
const Clock24HourProvider = ({ children }) => {
  const [use24Hour, setUse24Hour] = useChromeStorage("use24Hour", defaultUse24Hour)
  return <Clock24HourContext.Provider value={{ use24Hour, setUse24Hour }}>{children}</Clock24HourContext.Provider>
}

export const ShowSecondsContext = createContext(null)
const defaultShowSeconds = false
const ShowSecondsProvider = ({ children }) => {
  const [showSeconds, setShowSeconds] = useChromeStorage("showSeconds", defaultShowSeconds)
  return <ShowSecondsContext.Provider value={{ showSeconds, setShowSeconds }}>{children}</ShowSecondsContext.Provider>
}

export const ClockProvider = ({ children }) => {
  return (
    <Clock24HourProvider>
      <ShowSecondsProvider>{children}</ShowSecondsProvider>
    </Clock24HourProvider>
  )
}

================
File: src/context/general/GreetingContext.tsx
================
import { createContext } from "react"
import useChromeStorage from "../../hooks/useChromeStorage"

export const ShowGreetingContext = createContext(null)
const defualtGreeting = true
const ShowGreetingProvider = ({ children }) => {
  const [showGreeting, setShowGreeting] = useChromeStorage("showGreeting", defualtGreeting)
  return (
    <ShowGreetingContext.Provider value={{ showGreeting, setShowGreeting }}>{children}</ShowGreetingContext.Provider>
  )
}

export const CustomGreetingContext = createContext(null)
const defaultCustomGreeting = ""
const CustomGreetingProvider = ({ children }) => {
  const [customGreeting, setCustomGreeting] = useChromeStorage("customGreeting", defaultCustomGreeting)
  return (
    <CustomGreetingContext.Provider value={{ customGreeting, setCustomGreeting }}>
      {children}
    </CustomGreetingContext.Provider>
  )
}

export const MantraEnabledContext = createContext(null)
const defaultMantraEnabled = true
const MantraEnabledProvider = ({ children }) => {
  const [mantraEnabled, setMantraEnabled] = useChromeStorage("mantraEnabled", defaultMantraEnabled)
  return (
    <MantraEnabledContext.Provider value={{ mantraEnabled, setMantraEnabled }}>
      {children}
    </MantraEnabledContext.Provider>
  )
}

export const MantraFrequencyContext = createContext(null)
const defaultFrequency = 1 // 1 = rarely, 2 = sometimes, 3 = often, 4 = always
const MantraFrequencyProvider = ({ children }) => {
  const [frequency, setFrequency] = useChromeStorage("frequency", defaultFrequency)
  return (
    <MantraFrequencyContext.Provider value={{ frequency, setFrequency }}>{children}</MantraFrequencyContext.Provider>
  )
}

export const MantrasCurated = createContext(null)
const defaultCurated = false
const MantrasCuratedProvider = ({ children }) => {
  const [curated, setCurated] = useChromeStorage("curated", defaultCurated)
  return <MantrasCurated.Provider value={{ curated, setCurated }}>{children}</MantrasCurated.Provider>
}

export const MantraOptionsContext = createContext(null)
const defaultOptions = [
  "Today, above all else, I choose love.",
  "Everything I need is within me.",
  "Today is my newest masterpiece.",
  "Joy is right here.",
]
const MantraOptionsProvider = ({ children }) => {
  const [options, setOptions] = useChromeStorage("options", defaultOptions)
  return <MantraOptionsContext.Provider value={{ options, setOptions }}>{children}</MantraOptionsContext.Provider>
}

export const GreetingProvider = ({ children }) => {
  return (
    <ShowGreetingProvider>
      <MantraFrequencyProvider>
        <MantraEnabledProvider>
          <MantrasCuratedProvider>
            <CustomGreetingProvider>
              <MantraOptionsProvider>{children}</MantraOptionsProvider>
            </CustomGreetingProvider>
          </MantrasCuratedProvider>
        </MantraEnabledProvider>
      </MantraFrequencyProvider>
    </ShowGreetingProvider>
  )
}

================
File: src/context/general/TodosContext.tsx
================
import { createContext } from "react"
import useChromeStorage from "../../hooks/useChromeStorage"

export const ShowTodosContext = createContext(null)
const defaultShowTodos = true
const ShowTodosProvider = ({ children }) => {
  const [showTodos, setShowTodos] = useChromeStorage("showTodos", defaultShowTodos)
  return <ShowTodosContext.Provider value={{ showTodos, setShowTodos }}>{children}</ShowTodosContext.Provider>
}

export const OpenTodosContext = createContext(null)
const defaultOpenTodos = false
const OpenTodosProvider = ({ children }) => {
  const [openTodos, setOpenTodos] = useChromeStorage("openTodos", defaultOpenTodos)
  return <OpenTodosContext.Provider value={{ openTodos, setOpenTodos }}>{children}</OpenTodosContext.Provider>
}

export const TodosContext = createContext(null)
const defaultTodos = [
  { text: "Set username", completed: false, createdAt: Date.now() },
  { text: "Set weather location", completed: true, createdAt: Date.now() + 1 },
  { text: "Create more todos", completed: false, createdAt: Date.now() + 3 },
]
// will be objects with {text: string, completed: boolean, createdAt: number}
const TodoListProvider = ({ children }) => {
  const [todos, setTodos] = useChromeStorage("todos", defaultTodos)
  return <TodosContext.Provider value={{ todos, setTodos }}>{children}</TodosContext.Provider>
}

export const TodosProvider = ({ children }) => {
  return (
    <ShowTodosProvider>
      <OpenTodosProvider>
        <TodoListProvider>{children}</TodoListProvider>
      </OpenTodosProvider>
    </ShowTodosProvider>
  )
}

================
File: src/context/general/UserInfoContext.tsx
================
import { createContext } from "react"
import useChromeStorage from "../../hooks/useChromeStorage"

export const FirstNameContext = createContext(null)
const defaultFirstName = "User"
const FirstNameProvider = ({ children }) => {
  const [firstName, setFirstName] = useChromeStorage("firstName", defaultFirstName)
  return <FirstNameContext.Provider value={{ firstName, setFirstName }}>{children}</FirstNameContext.Provider>
}

export const UserInfoProvider = ({ children }) => {
  return <FirstNameProvider>{children}</FirstNameProvider>
}

================
File: src/context/integrations/Integrations.tsx
================
import { LifxProvider } from "./Lifx"
import { SpotifyProvider } from "./Spotify"

export const Integrations = ({ children }) => {
  return (
    <LifxProvider>
      <SpotifyProvider>{children}</SpotifyProvider>
    </LifxProvider>
  )
}

================
File: src/context/integrations/Lifx.tsx
================
import useChromeStorage from "@/hooks/useChromeStorage"
import { createContext } from "react"

export const LifxEnabledContext = createContext(null)
const lifxEnabledDefault = true
const LifxEnabledProvider = ({ children }) => {
  const [lifxEnabled, setLifxEnabled] = useChromeStorage("lifxEnabled", lifxEnabledDefault)
  return <LifxEnabledContext.Provider value={{ lifxEnabled, setLifxEnabled }}>{children}</LifxEnabledContext.Provider>
}

export const LifxApiKeyContext = createContext(null)
// c554cf4ba4a6ce826406378aec94b47fe838bd09b1aeed03604021b6e53d663c

const lifxApiKeyDefault = "c554cf4ba4a6ce826406378aec94b47fe838bd09b1aeed03604021b6e53d663c"
const LifxApiKeyProvider = ({ children }) => {
  const [lifxApiKey, setLifxApiKey] = useChromeStorage("lifxApiKey", lifxApiKeyDefault)
  return <LifxApiKeyContext.Provider value={{ lifxApiKey, setLifxApiKey }}>{children}</LifxApiKeyContext.Provider>
}

export const LifxRecentColorsContext = createContext(null)
const lifxRecentColorsDefault = []
const LifxRecentColorsProvider = ({ children }) => {
  const [lifxRecentColors, setLifxRecentColors] = useChromeStorage("lifxRecentColors", lifxRecentColorsDefault)
  return (
    <LifxRecentColorsContext.Provider value={{ lifxRecentColors, setLifxRecentColors }}>
      {children}
    </LifxRecentColorsContext.Provider>
  )
}

export const LifxProvider = ({ children }) => {
  return (
    <LifxEnabledProvider>
      <LifxRecentColorsProvider>
        <LifxApiKeyProvider>{children}</LifxApiKeyProvider>
      </LifxRecentColorsProvider>
    </LifxEnabledProvider>
  )
}

================
File: src/context/integrations/Spotify.tsx
================
import useChromeStorage from "@/hooks/useChromeStorage"
import { createContext } from "react"

export const SpotifyEnabledContext = createContext(null)
const spotifyEnabledDefault = true
const SpotifyEnabledProvider = ({ children }) => {
  const [spotifyEnabled, setSpotifyEnabled] = useChromeStorage("spotifyEnabled", spotifyEnabledDefault)
  return (
    <SpotifyEnabledContext.Provider value={{ spotifyEnabled, setSpotifyEnabled }}>
      {children}
    </SpotifyEnabledContext.Provider>
  )
}

export const SpotifyProvider = ({ children }) => {
  return <SpotifyEnabledProvider>{children}</SpotifyEnabledProvider>
}

================
File: src/context/MainProvider.tsx
================
import { AppearanceProvider } from "./appearance/Appearance"
import { LayoutProvider } from "./appearance/Layout"
import { ClockProvider } from "./general/ClockContext"
import { GreetingProvider } from "./general/GreetingContext"
import { TodosProvider } from "./general/TodosContext"
import { UserInfoProvider } from "./general/UserInfoContext"
import { Integrations } from "./integrations/Integrations"
import { Shortcuts } from "./shortcuts/Shortcuts"
import TimerProvider from "./timer/TimerProvider"
import { WeatherProvider } from "./weather/WeatherProvider"

export default function MainProvider({ children }: { children: React.ReactNode }) {
  return (
    <LayoutProvider>
      <GreetingProvider>
        <UserInfoProvider>
          <TodosProvider>
            <WeatherProvider>
              <TimerProvider>
                <AppearanceProvider>
                  <Shortcuts>
                    <Integrations>
                      <ClockProvider>{children}</ClockProvider>
                    </Integrations>
                  </Shortcuts>
                </AppearanceProvider>
              </TimerProvider>
            </WeatherProvider>
          </TodosProvider>
        </UserInfoProvider>
      </GreetingProvider>
    </LayoutProvider>
  )
}

================
File: src/context/shortcuts/Shortcuts.tsx
================
import useChromeStorage from "@/hooks/useChromeStorage"
import { createContext } from "react"

export const displayModeContext = createContext(null)
const displayModeDefault = "shown" // "shown" or "hidden" or "suggested"
const DisplayModeProvider = ({ children }) => {
  const [displayMode, setDisplayMode] = useChromeStorage("gridDisplayMode", displayModeDefault)
  return <displayModeContext.Provider value={{ displayMode, setDisplayMode }}>{children}</displayModeContext.Provider>
}

export const shortcutsContext = createContext(null)
const shortcutsDefault = [
  { name: "Portfolio", url: "https://www.dominicclerici.com", id: "10", useCount: 0 },
  { name: "StackOverflow", url: "https://stackoverflow.com", id: "1", useCount: 0 },
  { name: "GitHub", url: "https://github.com", id: "2", useCount: 0 },
  { name: "Google", url: "https://www.google.com", id: "3", useCount: 0 },
  { name: "YouTube", url: "https://www.youtube.com", id: "4", useCount: 0 },
  { name: "Reddit", url: "https://www.reddit.com", id: "5", useCount: 0 },
  { name: "Twitter", url: "https://twitter.com", id: "6", useCount: 0 },
  { name: "LinkedIn", url: "https://www.linkedin.com", id: "7", useCount: 0 },
  { name: "Medium", url: "https://medium.com", id: "8", useCount: 0 },
  { name: "Mozilla Developer Network", url: "https://developer.mozilla.org", id: "9", useCount: 0 },
  { name: "Product Hunt", url: "https://www.producthunt.com", id: "11", useCount: 0 },
  { name: "Dev.to", url: "https://dev.to", id: "12", useCount: 0 },
]

const ShortcutsProvider = ({ children }) => {
  const [shortcuts, setShortcuts] = useChromeStorage("shortcuts", shortcutsDefault)

  const addOneToUseCount = (id) => {
    const newShortcuts = shortcuts.map((shortcut) => {
      if (shortcut.id === id) {
        return { ...shortcut, useCount: shortcut.useCount + 1 }
      }
      return shortcut
    })
    setShortcuts(newShortcuts)
  }

  return (
    <shortcutsContext.Provider value={{ shortcuts, setShortcuts, addOneToUseCount }}>
      {children}
    </shortcutsContext.Provider>
  )
}

export const Shortcuts = ({ children }) => {
  return (
    <DisplayModeProvider>
      <ShortcutsProvider>{children}</ShortcutsProvider>
    </DisplayModeProvider>
  )
}

================
File: src/context/timer/TimerProvider.tsx
================
import { createContext } from "react"
import useChromeStorage from "../../hooks/useChromeStorage"

export const TimerEnabledContext = createContext(null)
const timerEnabledDefault = true
const TimerEnabledProvider = ({ children }) => {
  const [timerEnabled, setTimerEnabled] = useChromeStorage("timerEnabled", timerEnabledDefault)
  return (
    <TimerEnabledContext.Provider value={{ timerEnabled, setTimerEnabled }}>{children}</TimerEnabledContext.Provider>
  )
}

export default function TimerProvider({ children }) {
  return <TimerEnabledProvider>{children}</TimerEnabledProvider>
}

================
File: src/context/weather/WeatherProvider.tsx
================
import { createContext } from "react"
import useChromeStorage from "../../hooks/useChromeStorage"

export const WeatherEnabledContext = createContext(null)
export const weatherEnabledDefault = true
const WeatherEnabledProvider = ({ children }) => {
  const [weatherEnabled, setWeatherEnabled] = useChromeStorage("weatherEnabled", weatherEnabledDefault)
  return (
    <WeatherEnabledContext.Provider value={{ weatherEnabled, setWeatherEnabled }}>
      {children}
    </WeatherEnabledContext.Provider>
  )
}

export const WeatherIsCelsiusContext = createContext(null)
export const weatherIsCelsiusDefault = false
const WeatherIsCelsiusProvider = ({ children }) => {
  const [weatherIsCelsius, setWeatherIsCelsius] = useChromeStorage("weatherIsCelsius", weatherIsCelsiusDefault)
  return (
    <WeatherIsCelsiusContext.Provider value={{ weatherIsCelsius, setWeatherIsCelsius }}>
      {children}
    </WeatherIsCelsiusContext.Provider>
  )
}

export const UseAutomaticLocationContext = createContext(null)
export const useAutomaticLocationDefault = false
const UseAutomaticLocationProvider = ({ children }) => {
  const [useAutomaticLocation, setUseAutomaticLocation] = useChromeStorage(
    "useAutomaticLocation",
    useAutomaticLocationDefault,
  )

  return (
    <UseAutomaticLocationContext.Provider value={{ useAutomaticLocation, setUseAutomaticLocation }}>
      {children}
    </UseAutomaticLocationContext.Provider>
  )
}

export const WeatherLocationContext = createContext(null)
export const weatherLocationDefault = { lat: 0, lon: 0, name: "none" }
const WeatherLocationProvider = ({ children }) => {
  const [weatherLocation, setWeatherLocation] = useChromeStorage("weatherLocation", weatherLocationDefault)
  return (
    <WeatherLocationContext.Provider value={{ weatherLocation, setWeatherLocation }}>
      {children}
    </WeatherLocationContext.Provider>
  )
}

export const WeatherLocationOptions = createContext(null)
export const weatherLocationOptionsDefault = [{ lat: 37.7749, lon: -122.4194, name: "San Francisco" }]
const WeatherLocationOptionsProvider = ({ children }) => {
  const [weatherLocationOptions, setWeatherLocationOptions] = useChromeStorage(
    "weatherLocationOptions",
    weatherLocationOptionsDefault,
  )
  return (
    <WeatherLocationOptions.Provider value={{ weatherLocationOptions, setWeatherLocationOptions }}>
      {children}
    </WeatherLocationOptions.Provider>
  )
}

export const WeatherProvider = ({ children }) => {
  return (
    <WeatherEnabledProvider>
      <WeatherIsCelsiusProvider>
        <WeatherLocationProvider>
          <WeatherLocationOptionsProvider>
            <UseAutomaticLocationProvider>{children}</UseAutomaticLocationProvider>
          </WeatherLocationOptionsProvider>
        </WeatherLocationProvider>
      </WeatherIsCelsiusProvider>
    </WeatherEnabledProvider>
  )
}

================
File: src/hooks/useChromeStorage.ts
================
import { useEffect, useRef, useState } from "react"

const useChromeStorage = <T>(key: string, initialValue: T) => {
  const [data, setData] = useState<T>(initialValue)
  const debounceUpdate = useRef<null | NodeJS.Timeout>(null)
  const originalData = useRef<null | T>(null)

  const storage = chrome.storage

  useEffect(() => {
    if (storage) {
      storage.sync.get([key], (result) => {
        // If the data exists, use it. Otherwise, set the default value.
        if (chrome.runtime.lastError) {
          // ! ADD ERROR HANDLING HERE
          console.error(`Error getting ${key}:, ${chrome.runtime.lastError}`)
          return
        }

        if (result[key] !== undefined) {
          setData(result[key])
        } else {
          storage.sync.set({ [key]: initialValue }, () => {
            if (chrome.runtime.lastError) {
              // ! ADD ERROR HANDLING HERE
              console.error(`Error setting ${key}:, ${chrome.runtime.lastError}`)
              return
            }
            setData(initialValue)
          })
        }
        // Try fetching the data from Chrome storage
      })
    }
  }, [key, initialValue])

  const updateData = (newValue: T | ((prevValue: T) => T)) => {
    console.log("began update")
    if (debounceUpdate.current) {
      clearTimeout(debounceUpdate.current)
    } else {
      originalData.current = data
    }

    const valueToStore = newValue instanceof Function ? newValue(data) : newValue

    console.log("called setstate")
    setData(valueToStore)

    debounceUpdate.current = setTimeout(() => {
      console.log("Setting in storage")
      storage.sync.set({ [key]: valueToStore }, () => {
        if (chrome.runtime.lastError) {
          console.error(`Error getting ${key}:, ${chrome.runtime.lastError}`)
          if (originalData.current !== null) {
            setData(originalData.current)
          }
          return
        }
        debounceUpdate.current = null
      })
    }, 1000)
  }
  if (storage === undefined) {
    return [data, setData] as const
  }
  return [data, updateData] as const
}

export default useChromeStorage

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@font-face {
  font-family: "Instrument Sans";
  font-style: normal;
  font-display: swap;
  src: url("/fonts/instrument.ttf") format("ttf");
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 5.9% 10%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings:
      "rlig" 1,
      "calt" 1;
  }
  input[type="number"]::-webkit-inner-spin-button,
  input[type="number"]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
}

body {
  font-size: 16px;
  font-family: "Instrument Sans";
  overflow: hidden;
}
.panel-gradient {
  background: rgb(var(--surface));
  background-image: linear-gradient(45deg, rgb(var(--surface)) 0%, rgb(var(--bg-highest)) 100%);
}
:root {
  --bg: 11 11 14;
  --bg-higher: 18 18 22;
  --bg-highest: 23 23 28;
  --surface: 30 30 33;
  --hover: 37 37 41;
  --main: 240 240 240;
  --highlight: 6 182 212;
}
:root.light {
  --bg: 250 250 250;
  --bg-higher: 240 240 240;
  --bg-highest: 220 220 220;
  --surface: 200 200 200;
  --main: 20 20 20;
  --highlight: 6 182 212;
}
/* Chrome, Safari, Edge, Opera */
input[type="number"].hideNumber::-webkit-outer-spin-button,
input[type="number"].hideNumber::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* Firefox */
input[type="number"].hideNumber {
  -moz-appearance: textfield;
}
.customScrollBar::-webkit-scrollbar {
  width: 10px;
}
.customScrollBar::-webkit-scrollbar-track {
  background: rgb(var(--bg));
}
.customScrollBar::-webkit-scrollbar-thumb {
  background: rgb(var(--surface));
  border-radius: 10px;
}

================
File: src/keyframes.css
================
@keyframes slideFadeInFromRight {
  0% {
    opacity: 0;
    transform: translateX(20%);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}
@keyframes slideFadeOutToRight {
  0% {
    opacity: 1;
    transform: translateX(0);
  }
  100% {
    opacity: 0;
    transform: translateX(20%);
  }
}

@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@keyframes fadeOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}
@keyframes spin {
  0% {
    transform: rotate(270deg);
  }
  100% {
    transform: rotate(0deg);
  }
}
@keyframes tabSlideToLeft {
  from {
    opacity: 1;
    transform: translateX(0px);
  }
  to {
    opacity: 0;
    transform: translateX(-50px);
  }
}

@keyframes tabSlideFromLeft {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0px);
  }
}
@keyframes tabSlideFromRight {
  0% {
    opacity: 0;
    transform: translateX(-50px);
  }
  100% {
    opacity: 1;
    transform: translateX(0px);
  }
}
@keyframes tabSlideToRight {
  0% {
    opacity: 1;
    transform: translateX(0px);
  }
  100% {
    opacity: 0;
    transform: translateX(50px);
  }
}
@keyframes accordionExpand {
  from {
    height: 0;
    opacity: 0;
  }
  to {
    opacity: 1;
    height: var(--radix-accordion-content-height);
  }
}

@keyframes accordionShrink {
  from {
    opacity: 1;
    height: var(--radix-accordion-content-height);
  }
  to {
    opacity: 0;
    height: 0;
  }
}
@keyframes slideFadeInFromTop {
  0% {
    opacity: 0;
    transform: translateY(-15px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideFadeOutToTop {
  0% {
    opacity: 1;
    transform: translateY(0);
  }
  100% {
    opacity: 0;
    transform: translateY(-15px);
  }
}

@keyframes slideUpExpandFadeIn {
  0% {
    opacity: 0;
    transform: translateY(10px) scale(0.95);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

@keyframes slideDownShrinkFadeOut {
  0% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
  100% {
    opacity: 0;
    transform: translateY(10px) scale(0.95);
  }
}

@keyframes slideDownExpandFadeIn {
  0% {
    opacity: 0;
    transform: translateY(-10px) scale(0.95);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}
@keyframes slideUpShrinkFadeOut {
  0% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
  100% {
    opacity: 0;
    transform: translateY(-10px) scale(0.95);
  }
}

@keyframes slideRightShrinkFadeOut {
  0% {
    opacity: 1;
    transform: translateX(0) scale(1);
  }
  20% {
    opacity: 0.9;
    transform: translateX(0) scale(0.95);
  }
  50% {
    opacity: 0;
    transform: translateX(10px) scale(0.95);
    height: 24px;
    margin-top: 0px;
  }
  100% {
    opacity: 0;
    transform: translateX(10px) scale(0.95);
    height: 0px;
    margin-top: -8px;
  }
}
@keyframes expandRiseFadeIn {
  0% {
    opacity: 0;
    transform: translateY(-15px);
    height: 0px;
  }
  100% {
    opacity: 1;
    transform: translateY(0);
    height: 30px;
  }
}
@keyframes shrinkDropFadeOut {
  0% {
    opacity: 1;
    margin-top: -0px;
    transform: translateY(0px);
    height: 30px;
  }
  100% {
    opacity: 0;
    margin-top: -8px;
    transform: translateY(-15px);
    height: 0px;
  }
}
@keyframes fadeScaleIn {
  0% {
    opacity: 0;
    transform: scale(0.95);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}
@keyframes expandFadeIn {
  0% {
    opacity: 0;
    transform: scale(0.95);
  }
  70% {
    opacity: 0.7;
    transform: scale(1);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}
@keyframes shrinkFadeOut {
  0% {
    opacity: 1;
    transform: scale(1);
  }
  70% {
    opacity: 0.7;
    transform: scale(0.95);
  }
  100% {
    opacity: 0;
    transform: scale(0.95);
  }
}
@keyframes rotatePolyLine {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
.animateRotatePolyline {
  animation: rotatePolyLine 10s linear infinite;
}

================
File: src/LayoutController.tsx
================
import { useContext, useState } from "react"
import Opener from "./components/settings/Opener"
import { LayoutContext } from "./context/appearance/Layout"
import MainClock from "./components/clock/MainClock"
import Greeting from "./components/greeting/Greeting"
import Search from "./components/search/Search"
import Shortcuts from "./components/shortcuts/Shortcuts"
import Lifx from "./components/lifx/Lifx"
import ConnectionWrapper from "./ConnectionWrapper"
import Todos from "./components/todos/Todos"
import Weather from "./components/weather/Weather"
import Timer from "./components/timer/Timer"
import SpotifyAuthController from "./components/spotify/SpotifyAuthController"
import { PauseIcon, PlayIcon, SkipBackIcon, SkipForwardIcon } from "lucide-react"
import { Button } from "./components/ui/button"
import { Card } from "./components/ui/card"

export default function LayoutController() {
  const { layout } = useContext(LayoutContext)
  const [prevlayout, setPrevLayout] = useState(layout)
  let usingLayout = 0
  const diff = prevlayout !== layout
  if (diff) {
    usingLayout = prevlayout
    setTimeout(() => {
      setPrevLayout(layout)
    }, 600)
  } else {
    usingLayout = layout
  }
  // stack layout
  if (usingLayout === 0) {
    return (
      <>
        <Opener />
        <div
          className={`${diff ? "opacity-0" : ""} mx-auto flex h-screen max-w-screen-lg flex-col items-center justify-center transition-opacity duration-500`}
        >
          <div className="fixed bottom-4 left-4 flex w-full items-center justify-center">
            <Timer />
            <ConnectionWrapper fallback={<p>Offline</p>}>
              <Lifx />
            </ConnectionWrapper>
            <Todos />
            <ConnectionWrapper fallback={<p>Offline</p>}>
              <Weather />
            </ConnectionWrapper>
            <ConnectionWrapper fallback={<p>Offline</p>}>
              <SpotifyAuthController />
            </ConnectionWrapper>
          </div>
          <MainClock />
          <Greeting />
          <Search />
          <Shortcuts />
        </div>
      </>
    )
  }
  // some kinda idk layout
  if (usingLayout === 1) {
    return (
      <>
        <Opener />
        <div
          className={`${diff ? "opacity-0" : ""} mx-auto flex h-screen max-w-screen-lg flex-col items-center justify-center transition-opacity duration-500`}
        >
          {/* top left */}
          <div className="fixed left-4 top-4 flex items-center gap-4">
            <Timer />
            <Lifx />
          </div>
          {/* bottom left */}
          <div className="fixed bottom-4 left-4 flex items-center gap-4">
            <ConnectionWrapper fallback={<p>Offline</p>}>
              <Weather />
            </ConnectionWrapper>
          </div>
          {/* bottom right */}
          <div className="fixed bottom-4 right-4 flex items-center gap-4">
            <Todos />
          </div>
          <MainClock />
          <Greeting />
          <Search />
          <Shortcuts />
        </div>
      </>
    )
  }
}

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
export function generateUuid() {
  return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, (c) =>
    (+c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (+c / 4)))).toString(16),
  )
}

================
File: src/main.tsx
================
import React from "react"
import ReactDOM from "react-dom/client"
import App from "./App.tsx"
import "./index.css"
import "./keyframes.css"

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

================
File: src/types.ts
================
export interface Todo {
  id: string
  title: string
  dueDate: Date
  description: string
  createdAt: Date
  tags?: string[]
}

================
File: src/utils/formatDate.ts
================
export default function formatDate(date: Date): string {
  const now = new Date()
  const diffInMilliseconds = date.getTime() - now.getTime()
  const diffInMinutes = Math.floor(diffInMilliseconds / (1000 * 60))
  const diffInHours = Math.floor(diffInMinutes / 60)
  const diffInDays = Math.floor(diffInHours / 24)

  if (diffInDays >= 1 && diffInDays < 7) {
    return `${diffInDays} day${diffInDays > 1 ? "s" : ""}`
  } else if (diffInHours >= 1 && diffInHours < 24) {
    return `${diffInHours} hour${diffInHours > 1 ? "s" : ""}`
  } else if (diffInMinutes >= 1 && diffInMinutes < 60) {
    return `${diffInMinutes} minute${diffInMinutes > 1 ? "s" : ""}`
  } else if (diffInMinutes < 1) {
    return "Past due"
  }

  const options: Intl.DateTimeFormatOptions = { month: "short", day: "numeric" }
  return date.toLocaleDateString("en-US", options)
}

================
File: src/utils/spotify.ts
================
const AUTH_ENDPOINT = "http://localhost:3001/login"
const REFRESH_ENDPOINT = "http://localhost:3001/refresh_token"

export const loginUrl = AUTH_ENDPOINT

export const getTokenFromUrl = (): { [key: string]: string } => {
  return window.location.hash
    .substring(1)
    .split("&")
    .reduce(
      (initial, item) => {
        let parts = item.split("=")
        initial[parts[0]] = decodeURIComponent(parts[1])
        return initial
      },
      {} as { [key: string]: string },
    )
}

export const refreshAccessToken = async (refresh_token: string): Promise<any> => {
  const response = await fetch(REFRESH_ENDPOINT, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ refresh_token }),
  })

  if (!response.ok) {
    throw new Error("Failed to refresh token")
  }

  return response.json()
}

export const initiateSpotifyLogin = (): void => {
  const loginWindow = window.open(AUTH_ENDPOINT, "Spotify Login", "width=800,height=600")

  if (!loginWindow) {
    console.error("Failed to open login window. Pop-up might be blocked.")
    alert("Failed to open login window. Please allow pop-ups for this site.")
    return
  }

  const handleMessage = (event: MessageEvent) => {
    if (event.origin !== "http://localhost:3001") {
      console.error("Invalid origin:", event.origin)
      return
    }

    const { type, accessToken, refreshToken, expiresIn } = event.data

    if (type === "SPOTIFY_CALLBACK" && accessToken && refreshToken && expiresIn) {
      localStorage.setItem("spotifyAccessToken", accessToken)
      localStorage.setItem("spotifyRefreshToken", refreshToken)
      localStorage.setItem("spotifyTokenExpiry", (Date.now() + parseInt(expiresIn) * 1000).toString())

      window.removeEventListener("message", handleMessage)
      loginWindow.close()
      window.location.reload()
    }
  }

  window.addEventListener("message", handleMessage)
}

export const logoutSpotify = (): void => {
  localStorage.removeItem("spotifyAccessToken")
  localStorage.removeItem("spotifyRefreshToken")
  localStorage.removeItem("spotifyTokenExpiry")
  location.reload()
}

export const getSpotifyTokens = () => {
  const accessToken = localStorage.getItem("spotifyAccessToken")
  const refreshToken = localStorage.getItem("spotifyRefreshToken")
  const tokenExpiry = localStorage.getItem("spotifyTokenExpiry")

  return { accessToken, refreshToken, tokenExpiry }
}

================
File: src/utils/spotifyAPI.ts
================
import { getSpotifyTokens, refreshAccessToken } from "./spotify"

const SPOTIFY_BASE_URL = "https://api.spotify.com/v1"

interface SpotifyTrack {
  id: string
  name: string
  artists: { name: string }[]
  album: {
    name: string
    images: { url: string }[]
  }
  duration_ms: number
}

interface CurrentlyPlayingResponse {
  is_playing: boolean
  item: SpotifyTrack
  progress_ms: number
}

async function getValidAccessToken(): Promise<string> {
  const { accessToken, refreshToken, tokenExpiry } = getSpotifyTokens()

  if (accessToken && tokenExpiry && Number(tokenExpiry) > Date.now()) {
    return accessToken
  } else if (refreshToken) {
    const newTokens = await refreshAccessToken(refreshToken)
    return newTokens.access_token
  } else {
    throw new Error("No valid access token or refresh token available")
  }
}

export async function getCurrentlyPlayingTrack(): Promise<CurrentlyPlayingResponse | null> {
  try {
    const accessToken = await getValidAccessToken()
    const response = await fetch(`${SPOTIFY_BASE_URL}/me/player/currently-playing`, {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    })
    if (response.status === 204) {
      // No track currently playing
      return null
    }

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const data = await response.json()
    return data
  } catch (error) {
    console.error("Error fetching currently playing track:", error)
    throw error
  }
}

export async function pausePlayback(): Promise<void> {
  try {
    const accessToken = await getValidAccessToken()
    const response = await fetch(`${SPOTIFY_BASE_URL}/me/player/pause`, {
      method: "PUT",
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
  } catch (error) {
    console.error("Error pausing playback:", error)
    throw error
  }
}

export async function resumePlayback(): Promise<void> {
  try {
    const accessToken = await getValidAccessToken()
    const response = await fetch(`${SPOTIFY_BASE_URL}/me/player/play`, {
      method: "PUT",
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
  } catch (error) {
    console.error("Error resuming playback:", error)
    throw error
  }
}

export async function skipToNext(): Promise<void> {
  try {
    const accessToken = await getValidAccessToken()
    const response = await fetch(`${SPOTIFY_BASE_URL}/me/player/next`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
  } catch (error) {
    console.error("Error skipping to next track:", error)
    throw error
  }
}

export async function skipToPrevious(): Promise<void> {
  try {
    const accessToken = await getValidAccessToken()
    const response = await fetch(`${SPOTIFY_BASE_URL}/me/player/previous`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
  } catch (error) {
    console.error("Error skipping to previous track:", error)
    throw error
  }
}

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: tailwind.config.js
================
const { fontFamily } = require("tailwindcss/defaultTheme")

/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: ["./index.html", "./src/**/*.{tsx,jsx,js,ts}", "components/**/*.{ts,tsx}"],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        page: "rgb(var(--bg) / <alpha-value>)",
        panel: "rgb(var(--bg-higher) / <alpha-value>)",
        popup: "rgb(var(--bg-highest) / <alpha-value>)",
        hover: "rgb(var(--hover) / <alpha-value>)",
        surface: "rgb(var(--surface) / <alpha-value>)",
        main: "rgb(var(--main) / <alpha-value>)",
        highlight: "rgb(var(--highlight) / <alpha-value>)",
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: `var(--radius)`,
        md: `calc(var(--radius) - 2px)`,
        sm: "calc(var(--radius) - 4px)",
      },
      fontFamily: {
        sans: ["var(--font-sans)", ...fontFamily.sans],
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        "timer-alert": {
          "0%": { transform: "scale(1)" },
          "50%": { transform: "scale(1.1)" },
          "100%": { transform: "scale(1)" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.3s cubic-bezier(.1,.24,.4,.99)",
        "accordion-up": "accordion-up 0.3s ease-in",
        "timer-alert": "timer-alert 0.5s ease-in-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}

================
File: TODO.txt
================
Tonight: 
 - Spotify api integration: Player
 - Lifx api integration: presets, control lights, see what is possible

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "compilerOptions": {
    "allowJs": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },

  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "noEmit": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import path from "path"
import { defineConfig } from "vite"
import react from "@vitejs/plugin-react-swc"
// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  base: "",
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})
